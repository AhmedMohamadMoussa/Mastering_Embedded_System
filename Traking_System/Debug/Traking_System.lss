
Traking_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000218  00800060  00003828  000038bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800278  00800278  00003ad4  2**0
                  ALLOC
  3 .stab         00003894  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d24  00000000  00000000  00007368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000093df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000d9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e26f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__vector_1>
       8:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_2>
       c:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__vector_10>
      2c:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__vector_13>
      38:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__vector_14>
      3c:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 18 	call	0x30e0	; 0x30e0 <main>
      8a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e5       	ldi	r26, 0x58	; 88
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e5       	ldi	r24, 0x58	; 88
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 ff 1b 	jmp	0x37fe	; 0x37fe <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 5a       	subi	r30, 0xA0	; 160
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <MADC_voidInit>:
#include "../include/MCAL/ADC/ADC_interface.h"
#include "../include/MCAL/ADC/ADC_private.h"
#include "../include/MCAL/ADC/ADC_cfg.h"

void MADC_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	//Select AVCC with external capacitor at AREF pin
	SET_BIT(ADMUX_REG,6);
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,7);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 77       	andi	r24, 0x7F	; 127
     cf8:	8c 93       	st	X, r24
	//RIGHT Adjustment
	CLR_BIT(ADMUX_REG,5);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 7d       	andi	r24, 0xDF	; 223
     d06:	8c 93       	st	X, r24
	//disable Auto Trigger
	CLR_BIT(ADCSRA_REG,5);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 7d       	andi	r24, 0xDF	; 223
     d14:	8c 93       	st	X, r24
	//select CLK /64
	CLR_BIT(ADCSRA_REG,0);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	8e 7f       	andi	r24, 0xFE	; 254
     d22:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,1);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,2);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	84 60       	ori	r24, 0x04	; 4
     d3e:	8c 93       	st	X, r24
	//Enable ADC
	SET_BIT(ADCSRA_REG,7);
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 68       	ori	r24, 0x80	; 128
     d4c:	8c 93       	st	X, r24
}
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <MADC_u16GetDigitalValue>:
u16 MADC_u16GetDigitalValue(ADC_CHANNEL A_AdcChannel)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <MADC_u16GetDigitalValue+0x6>
     d5a:	0f 92       	push	r0
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
     d62:	1a 82       	std	Y+2, r1	; 0x02
     d64:	19 82       	std	Y+1, r1	; 0x01
	if(A_AdcChannel< 32)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	80 32       	cpi	r24, 0x20	; 32
     d6a:	70 f5       	brcc	.+92     	; 0xdc8 <MADC_u16GetDigitalValue+0x74>
	{
		//clear the channel 5 bits
		ADMUX_REG &= ADC_CHANNEL_MASK;
     d6c:	a7 e2       	ldi	r26, 0x27	; 39
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e7 e2       	ldi	r30, 0x27	; 39
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 7e       	andi	r24, 0xE0	; 224
     d78:	8c 93       	st	X, r24
		//select channel
		ADMUX_REG |=A_AdcChannel;
     d7a:	a7 e2       	ldi	r26, 0x27	; 39
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e2       	ldi	r30, 0x27	; 39
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	90 81       	ld	r25, Z
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	89 2b       	or	r24, r25
     d88:	8c 93       	st	X, r24
		//start conversion
		SET_BIT(ADCSRA_REG,6);
     d8a:	a6 e2       	ldi	r26, 0x26	; 38
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e6 e2       	ldi	r30, 0x26	; 38
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 64       	ori	r24, 0x40	; 64
     d96:	8c 93       	st	X, r24
		//polling on ADC complete flag
		while(GET_BIT(ADCSRA_REG,4)==0);
     d98:	e6 e2       	ldi	r30, 0x26	; 38
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 95       	swap	r24
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	a9 f3       	breq	.-22     	; 0xd98 <MADC_u16GetDigitalValue+0x44>
		//clear INT .Flag
		SET_BIT(ADCSRA_REG,4);
     dae:	a6 e2       	ldi	r26, 0x26	; 38
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e6 e2       	ldi	r30, 0x26	; 38
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 61       	ori	r24, 0x10	; 16
     dba:	8c 93       	st	X, r24
		//READ CONVERSION VALUE
		local_u16DigitalValue =ADCLH_REG;
     dbc:	e4 e2       	ldi	r30, 0x24	; 36
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	91 81       	ldd	r25, Z+1	; 0x01
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
	}
	//return result of conversion
	return local_u16DigitalValue;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <MDIO_voidInit>:
#include "../include/MCAL/DIO/DIO_interface.h"
#include "../include/MCAL/DIO/DIO_private.h"
#include "../include/MCAL/DIO/DIO_cfg.h"

void MDIO_voidInit()
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG =CONC_BIT( PORTA_PIN7_DIRECTION , PORTA_PIN6_DIRECTION ,
     de0:	ea e3       	ldi	r30, 0x3A	; 58
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	10 82       	st	Z, r1
						PORTA_PIN5_DIRECTION , PORTA_PIN4_DIRECTION ,
						PORTA_PIN3_DIRECTION , PORTA_PIN2_DIRECTION ,
						PORTA_PIN1_DIRECTION , PORTA_PIN0_DIRECTION );

	DDRB_REG =CONC_BIT( PORTB_PIN7_DIRECTION , PORTB_PIN6_DIRECTION ,
     de6:	e7 e3       	ldi	r30, 0x37	; 55
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	80 83       	st	Z, r24
						PORTB_PIN5_DIRECTION , PORTB_PIN4_DIRECTION ,
						PORTB_PIN3_DIRECTION , PORTB_PIN2_DIRECTION ,
						PORTB_PIN1_DIRECTION , PORTB_PIN0_DIRECTION );

	DDRC_REG =CONC_BIT( PORTC_PIN7_DIRECTION , PORTC_PIN6_DIRECTION ,
     dee:	e4 e3       	ldi	r30, 0x34	; 52
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	10 82       	st	Z, r1
						PORTC_PIN5_DIRECTION , PORTC_PIN4_DIRECTION ,
						PORTC_PIN3_DIRECTION , PORTC_PIN2_DIRECTION ,
						PORTC_PIN1_DIRECTION , PORTC_PIN0_DIRECTION );

	DDRD_REG =CONC_BIT( PORTD_PIN7_DIRECTION , PORTD_PIN6_DIRECTION ,
     df4:	e1 e3       	ldi	r30, 0x31	; 49
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	80 83       	st	Z, r24
						PORTD_PIN5_DIRECTION , PORTD_PIN4_DIRECTION ,
						PORTD_PIN3_DIRECTION , PORTD_PIN2_DIRECTION ,
						PORTD_PIN1_DIRECTION , PORTD_PIN0_DIRECTION );

	PORTA_REG=CONC_BIT( PORTA_PIN7_VALUE , PORTA_PIN6_VALUE ,
     dfc:	eb e3       	ldi	r30, 0x3B	; 59
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1
						PORTA_PIN5_VALUE , PORTA_PIN4_VALUE ,
						PORTA_PIN3_VALUE , PORTA_PIN2_VALUE ,
						PORTA_PIN1_VALUE , PORTA_PIN0_VALUE );

	PORTB_REG=CONC_BIT( PORTB_PIN7_VALUE , PORTB_PIN6_VALUE ,
     e02:	e8 e3       	ldi	r30, 0x38	; 56
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	10 82       	st	Z, r1
						PORTB_PIN5_VALUE , PORTB_PIN4_VALUE ,
						PORTB_PIN3_VALUE , PORTB_PIN2_VALUE ,
						PORTB_PIN1_VALUE , PORTB_PIN0_VALUE );

	PORTC_REG=CONC_BIT( PORTC_PIN7_VALUE , PORTC_PIN6_VALUE ,
     e08:	e5 e3       	ldi	r30, 0x35	; 53
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	10 82       	st	Z, r1
						PORTC_PIN5_VALUE , PORTC_PIN4_VALUE ,
						PORTC_PIN3_VALUE , PORTC_PIN2_VALUE ,
						PORTC_PIN1_VALUE , PORTC_PIN0_VALUE );

	PORTD_REG=CONC_BIT( PORTD_PIN7_VALUE , PORTD_PIN6_VALUE ,
     e0e:	e2 e3       	ldi	r30, 0x32	; 50
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	10 82       	st	Z, r1
						PORTD_PIN5_VALUE , PORTD_PIN4_VALUE ,
						PORTD_PIN3_VALUE , PORTD_PIN2_VALUE ,
						PORTD_PIN1_VALUE , PORTD_PIN0_VALUE );

}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin , PIN_DIRECTION A_PinDirection)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	2d 97       	sbiw	r28, 0x0d	; 13
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	6a 83       	std	Y+2, r22	; 0x02
     e32:	4b 83       	std	Y+3, r20	; 0x03
	//input validation
	if( (A_DIOPort <= PORTD) && (A_DIOPin <= PIN7) && (A_PinDirection <= DIO_OUTPUT) )
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	08 f0       	brcs	.+2      	; 0xe3c <MDIO_voidSetPinDirection+0x22>
     e3a:	08 c1       	rjmp	.+528    	; 0x104c <MDIO_voidSetPinDirection+0x232>
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	08 f0       	brcs	.+2      	; 0xe44 <MDIO_voidSetPinDirection+0x2a>
     e42:	04 c1       	rjmp	.+520    	; 0x104c <MDIO_voidSetPinDirection+0x232>
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	82 30       	cpi	r24, 0x02	; 2
     e48:	08 f0       	brcs	.+2      	; 0xe4c <MDIO_voidSetPinDirection+0x32>
     e4a:	00 c1       	rjmp	.+512    	; 0x104c <MDIO_voidSetPinDirection+0x232>
	{
		switch(A_DIOPort)
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3d 87       	std	Y+13, r19	; 0x0d
     e54:	2c 87       	std	Y+12, r18	; 0x0c
     e56:	8c 85       	ldd	r24, Y+12	; 0x0c
     e58:	9d 85       	ldd	r25, Y+13	; 0x0d
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <MDIO_voidSetPinDirection+0x48>
     e60:	4f c0       	rjmp	.+158    	; 0xf00 <MDIO_voidSetPinDirection+0xe6>
     e62:	2c 85       	ldd	r18, Y+12	; 0x0c
     e64:	3d 85       	ldd	r19, Y+13	; 0x0d
     e66:	22 30       	cpi	r18, 0x02	; 2
     e68:	31 05       	cpc	r19, r1
     e6a:	2c f4       	brge	.+10     	; 0xe76 <MDIO_voidSetPinDirection+0x5c>
     e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	71 f0       	breq	.+28     	; 0xe90 <MDIO_voidSetPinDirection+0x76>
     e74:	eb c0       	rjmp	.+470    	; 0x104c <MDIO_voidSetPinDirection+0x232>
     e76:	2c 85       	ldd	r18, Y+12	; 0x0c
     e78:	3d 85       	ldd	r19, Y+13	; 0x0d
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <MDIO_voidSetPinDirection+0x68>
     e80:	77 c0       	rjmp	.+238    	; 0xf70 <MDIO_voidSetPinDirection+0x156>
     e82:	8c 85       	ldd	r24, Y+12	; 0x0c
     e84:	9d 85       	ldd	r25, Y+13	; 0x0d
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <MDIO_voidSetPinDirection+0x74>
     e8c:	a9 c0       	rjmp	.+338    	; 0xfe0 <MDIO_voidSetPinDirection+0x1c6>
     e8e:	de c0       	rjmp	.+444    	; 0x104c <MDIO_voidSetPinDirection+0x232>
		{
		case PORTA:
			switch(A_PinDirection)
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3b 87       	std	Y+11, r19	; 0x0b
     e98:	2a 87       	std	Y+10, r18	; 0x0a
     e9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <MDIO_voidSetPinDirection+0xbc>
     ea2:	2a 85       	ldd	r18, Y+10	; 0x0a
     ea4:	3b 85       	ldd	r19, Y+11	; 0x0b
     ea6:	21 30       	cpi	r18, 0x01	; 1
     ea8:	31 05       	cpc	r19, r1
     eaa:	09 f0       	breq	.+2      	; 0xeae <MDIO_voidSetPinDirection+0x94>
     eac:	cf c0       	rjmp	.+414    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			{
				case DIO_OUTPUT : SET_BIT(DDRA_REG,A_DIOPin);  break;
     eae:	aa e3       	ldi	r26, 0x3A	; 58
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <MDIO_voidSetPinDirection+0xb2>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <MDIO_voidSetPinDirection+0xae>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	bb c0       	rjmp	.+374    	; 0x104c <MDIO_voidSetPinDirection+0x232>
				case DIO_INPUT  : CLR_BIT(DDRA_REG,A_DIOPin);  break;
     ed6:	aa e3       	ldi	r26, 0x3A	; 58
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ea e3       	ldi	r30, 0x3A	; 58
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <MDIO_voidSetPinDirection+0xda>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <MDIO_voidSetPinDirection+0xd6>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	a6 c0       	rjmp	.+332    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTB:
			switch(A_PinDirection)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	39 87       	std	Y+9, r19	; 0x09
     f08:	28 87       	std	Y+8, r18	; 0x08
     f0a:	88 85       	ldd	r24, Y+8	; 0x08
     f0c:	99 85       	ldd	r25, Y+9	; 0x09
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	d1 f0       	breq	.+52     	; 0xf46 <MDIO_voidSetPinDirection+0x12c>
     f12:	28 85       	ldd	r18, Y+8	; 0x08
     f14:	39 85       	ldd	r19, Y+9	; 0x09
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <MDIO_voidSetPinDirection+0x104>
     f1c:	97 c0       	rjmp	.+302    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			{
				case DIO_OUTPUT : SET_BIT(DDRB_REG,A_DIOPin);  break;
     f1e:	a7 e3       	ldi	r26, 0x37	; 55
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e7 e3       	ldi	r30, 0x37	; 55
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <MDIO_voidSetPinDirection+0x122>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <MDIO_voidSetPinDirection+0x11e>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	83 c0       	rjmp	.+262    	; 0x104c <MDIO_voidSetPinDirection+0x232>
				case DIO_INPUT  : CLR_BIT(DDRB_REG,A_DIOPin);  break;
     f46:	a7 e3       	ldi	r26, 0x37	; 55
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e7 e3       	ldi	r30, 0x37	; 55
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <MDIO_voidSetPinDirection+0x14a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <MDIO_voidSetPinDirection+0x146>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	6e c0       	rjmp	.+220    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTC:
			switch(A_PinDirection)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3f 83       	std	Y+7, r19	; 0x07
     f78:	2e 83       	std	Y+6, r18	; 0x06
     f7a:	8e 81       	ldd	r24, Y+6	; 0x06
     f7c:	9f 81       	ldd	r25, Y+7	; 0x07
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <MDIO_voidSetPinDirection+0x19c>
     f82:	2e 81       	ldd	r18, Y+6	; 0x06
     f84:	3f 81       	ldd	r19, Y+7	; 0x07
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	31 05       	cpc	r19, r1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <MDIO_voidSetPinDirection+0x174>
     f8c:	5f c0       	rjmp	.+190    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			{
				case DIO_OUTPUT : SET_BIT(DDRC_REG,A_DIOPin);  break;
     f8e:	a4 e3       	ldi	r26, 0x34	; 52
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e4 e3       	ldi	r30, 0x34	; 52
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <MDIO_voidSetPinDirection+0x192>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <MDIO_voidSetPinDirection+0x18e>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	4b c0       	rjmp	.+150    	; 0x104c <MDIO_voidSetPinDirection+0x232>
				case DIO_INPUT  : CLR_BIT(DDRC_REG,A_DIOPin);  break;
     fb6:	a4 e3       	ldi	r26, 0x34	; 52
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e4 e3       	ldi	r30, 0x34	; 52
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MDIO_voidSetPinDirection+0x1ba>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MDIO_voidSetPinDirection+0x1b6>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	36 c0       	rjmp	.+108    	; 0x104c <MDIO_voidSetPinDirection+0x232>
			}
			break;
		case PORTD:
			switch(A_PinDirection)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3d 83       	std	Y+5, r19	; 0x05
     fe8:	2c 83       	std	Y+4, r18	; 0x04
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	c9 f0       	breq	.+50     	; 0x1024 <MDIO_voidSetPinDirection+0x20a>
     ff2:	2c 81       	ldd	r18, Y+4	; 0x04
     ff4:	3d 81       	ldd	r19, Y+5	; 0x05
     ff6:	21 30       	cpi	r18, 0x01	; 1
     ff8:	31 05       	cpc	r19, r1
     ffa:	41 f5       	brne	.+80     	; 0x104c <MDIO_voidSetPinDirection+0x232>
			{
				case DIO_OUTPUT : SET_BIT(DDRD_REG,A_DIOPin);  break;
     ffc:	a1 e3       	ldi	r26, 0x31	; 49
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e1 e3       	ldi	r30, 0x31	; 49
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <MDIO_voidSetPinDirection+0x200>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <MDIO_voidSetPinDirection+0x1fc>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	14 c0       	rjmp	.+40     	; 0x104c <MDIO_voidSetPinDirection+0x232>
				case DIO_INPUT  : CLR_BIT(DDRD_REG,A_DIOPin);  break;
    1024:	a1 e3       	ldi	r26, 0x31	; 49
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e1 e3       	ldi	r30, 0x31	; 49
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <MDIO_voidSetPinDirection+0x228>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <MDIO_voidSetPinDirection+0x224>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
			}
			break;
		default : break;
		}
	}
}
    104c:	2d 96       	adiw	r28, 0x0d	; 13
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <MDIO_voidSetPinStatus>:

void MDIO_voidSetPinStatus(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin , PIN_STATUS A_PinStatus)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	2d 97       	sbiw	r28, 0x0d	; 13
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	6a 83       	std	Y+2, r22	; 0x02
    1076:	4b 83       	std	Y+3, r20	; 0x03
	if( (A_DIOPort <= PORTD) && (A_DIOPin <= PIN7) && (A_PinStatus <= DIO_SET) )
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	84 30       	cpi	r24, 0x04	; 4
    107c:	08 f0       	brcs	.+2      	; 0x1080 <MDIO_voidSetPinStatus+0x22>
    107e:	08 c1       	rjmp	.+528    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	08 f0       	brcs	.+2      	; 0x1088 <MDIO_voidSetPinStatus+0x2a>
    1086:	04 c1       	rjmp	.+520    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	08 f0       	brcs	.+2      	; 0x1090 <MDIO_voidSetPinStatus+0x32>
    108e:	00 c1       	rjmp	.+512    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
	{
		switch(A_DIOPort)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3d 87       	std	Y+13, r19	; 0x0d
    1098:	2c 87       	std	Y+12, r18	; 0x0c
    109a:	8c 85       	ldd	r24, Y+12	; 0x0c
    109c:	9d 85       	ldd	r25, Y+13	; 0x0d
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <MDIO_voidSetPinStatus+0x48>
    10a4:	4f c0       	rjmp	.+158    	; 0x1144 <MDIO_voidSetPinStatus+0xe6>
    10a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a8:	3d 85       	ldd	r19, Y+13	; 0x0d
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	2c f4       	brge	.+10     	; 0x10ba <MDIO_voidSetPinStatus+0x5c>
    10b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    10b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <MDIO_voidSetPinStatus+0x76>
    10b8:	eb c0       	rjmp	.+470    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
    10ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    10bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <MDIO_voidSetPinStatus+0x68>
    10c4:	77 c0       	rjmp	.+238    	; 0x11b4 <MDIO_voidSetPinStatus+0x156>
    10c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <MDIO_voidSetPinStatus+0x74>
    10d0:	a9 c0       	rjmp	.+338    	; 0x1224 <MDIO_voidSetPinStatus+0x1c6>
    10d2:	de c0       	rjmp	.+444    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
		{
		case PORTA:
			switch(A_PinStatus)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	3b 87       	std	Y+11, r19	; 0x0b
    10dc:	2a 87       	std	Y+10, r18	; 0x0a
    10de:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	d1 f0       	breq	.+52     	; 0x111a <MDIO_voidSetPinStatus+0xbc>
    10e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    10e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    10ea:	21 30       	cpi	r18, 0x01	; 1
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <MDIO_voidSetPinStatus+0x94>
    10f0:	cf c0       	rjmp	.+414    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			{
				case DIO_SET   : SET_BIT(PORTA_REG,A_DIOPin);  break;
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <MDIO_voidSetPinStatus+0xb2>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <MDIO_voidSetPinStatus+0xae>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	bb c0       	rjmp	.+374    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
				case DIO_RESET : CLR_BIT(PORTA_REG,A_DIOPin);  break;
    111a:	ab e3       	ldi	r26, 0x3B	; 59
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	eb e3       	ldi	r30, 0x3B	; 59
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <MDIO_voidSetPinStatus+0xda>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <MDIO_voidSetPinStatus+0xd6>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	a6 c0       	rjmp	.+332    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			}
			break;
		case PORTB:
			switch(A_PinStatus)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	39 87       	std	Y+9, r19	; 0x09
    114c:	28 87       	std	Y+8, r18	; 0x08
    114e:	88 85       	ldd	r24, Y+8	; 0x08
    1150:	99 85       	ldd	r25, Y+9	; 0x09
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	d1 f0       	breq	.+52     	; 0x118a <MDIO_voidSetPinStatus+0x12c>
    1156:	28 85       	ldd	r18, Y+8	; 0x08
    1158:	39 85       	ldd	r19, Y+9	; 0x09
    115a:	21 30       	cpi	r18, 0x01	; 1
    115c:	31 05       	cpc	r19, r1
    115e:	09 f0       	breq	.+2      	; 0x1162 <MDIO_voidSetPinStatus+0x104>
    1160:	97 c0       	rjmp	.+302    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			{
				case DIO_SET   : SET_BIT(PORTB_REG,A_DIOPin);  break;
    1162:	a8 e3       	ldi	r26, 0x38	; 56
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e8 e3       	ldi	r30, 0x38	; 56
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <MDIO_voidSetPinStatus+0x122>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <MDIO_voidSetPinStatus+0x11e>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	83 c0       	rjmp	.+262    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
				case DIO_RESET : CLR_BIT(PORTB_REG,A_DIOPin);  break;
    118a:	a8 e3       	ldi	r26, 0x38	; 56
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e8 e3       	ldi	r30, 0x38	; 56
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <MDIO_voidSetPinStatus+0x14a>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <MDIO_voidSetPinStatus+0x146>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	6e c0       	rjmp	.+220    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			}
			break;
		case PORTC:
			switch(A_PinStatus)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3f 83       	std	Y+7, r19	; 0x07
    11bc:	2e 83       	std	Y+6, r18	; 0x06
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	d1 f0       	breq	.+52     	; 0x11fa <MDIO_voidSetPinStatus+0x19c>
    11c6:	2e 81       	ldd	r18, Y+6	; 0x06
    11c8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ca:	21 30       	cpi	r18, 0x01	; 1
    11cc:	31 05       	cpc	r19, r1
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <MDIO_voidSetPinStatus+0x174>
    11d0:	5f c0       	rjmp	.+190    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			{
				case DIO_SET   : SET_BIT(PORTC_REG,A_DIOPin);  break;
    11d2:	a5 e3       	ldi	r26, 0x35	; 53
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <MDIO_voidSetPinStatus+0x192>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <MDIO_voidSetPinStatus+0x18e>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	4b c0       	rjmp	.+150    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
				case DIO_RESET : CLR_BIT(PORTC_REG,A_DIOPin);  break;
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <MDIO_voidSetPinStatus+0x1ba>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <MDIO_voidSetPinStatus+0x1b6>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	36 c0       	rjmp	.+108    	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			}
			break;
		case PORTD:
			switch(A_PinStatus)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3d 83       	std	Y+5, r19	; 0x05
    122c:	2c 83       	std	Y+4, r18	; 0x04
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	c9 f0       	breq	.+50     	; 0x1268 <MDIO_voidSetPinStatus+0x20a>
    1236:	2c 81       	ldd	r18, Y+4	; 0x04
    1238:	3d 81       	ldd	r19, Y+5	; 0x05
    123a:	21 30       	cpi	r18, 0x01	; 1
    123c:	31 05       	cpc	r19, r1
    123e:	41 f5       	brne	.+80     	; 0x1290 <MDIO_voidSetPinStatus+0x232>
			{
				case DIO_SET   : SET_BIT(PORTD_REG,A_DIOPin);  break;
    1240:	a2 e3       	ldi	r26, 0x32	; 50
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e2 e3       	ldi	r30, 0x32	; 50
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <MDIO_voidSetPinStatus+0x200>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <MDIO_voidSetPinStatus+0x1fc>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	14 c0       	rjmp	.+40     	; 0x1290 <MDIO_voidSetPinStatus+0x232>
				case DIO_RESET : CLR_BIT(PORTD_REG,A_DIOPin);  break;
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <MDIO_voidSetPinStatus+0x228>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <MDIO_voidSetPinStatus+0x224>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
			}
			break;
		default : break;
		}
	}
}
    1290:	2d 96       	adiw	r28, 0x0d	; 13
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <MDIO_voidTogglePinValue>:

void MDIO_voidTogglePinValue(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <MDIO_voidTogglePinValue+0x6>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <MDIO_voidTogglePinValue+0x8>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
	if( (A_DIOPort <= PORTD) && (A_DIOPin <= PIN7) )
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <MDIO_voidTogglePinValue+0x18>
    12b8:	72 c0       	rjmp	.+228    	; 0x139e <MDIO_voidTogglePinValue+0xfc>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	08 f0       	brcs	.+2      	; 0x12c2 <MDIO_voidTogglePinValue+0x20>
    12c0:	6e c0       	rjmp	.+220    	; 0x139e <MDIO_voidTogglePinValue+0xfc>
	{
		switch(A_DIOPort)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3c 83       	std	Y+4, r19	; 0x04
    12ca:	2b 83       	std	Y+3, r18	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	49 f1       	breq	.+82     	; 0x1328 <MDIO_voidTogglePinValue+0x86>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <MDIO_voidTogglePinValue+0x48>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	61 f0       	breq	.+24     	; 0x1300 <MDIO_voidTogglePinValue+0x5e>
    12e8:	5a c0       	rjmp	.+180    	; 0x139e <MDIO_voidTogglePinValue+0xfc>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	71 f1       	breq	.+92     	; 0x1350 <MDIO_voidTogglePinValue+0xae>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	e9 f1       	breq	.+122    	; 0x1378 <MDIO_voidTogglePinValue+0xd6>
    12fe:	4f c0       	rjmp	.+158    	; 0x139e <MDIO_voidTogglePinValue+0xfc>
		{
		case PORTA: TOGGLE_BIT(PORTA_REG,A_DIOPin); break;
    1300:	ab e3       	ldi	r26, 0x3B	; 59
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MDIO_voidTogglePinValue+0x7c>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MDIO_voidTogglePinValue+0x78>
    1322:	84 27       	eor	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	3b c0       	rjmp	.+118    	; 0x139e <MDIO_voidTogglePinValue+0xfc>
		case PORTB: TOGGLE_BIT(PORTB_REG,A_DIOPin); break;
    1328:	a8 e3       	ldi	r26, 0x38	; 56
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e8 e3       	ldi	r30, 0x38	; 56
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <MDIO_voidTogglePinValue+0xa4>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <MDIO_voidTogglePinValue+0xa0>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	27 c0       	rjmp	.+78     	; 0x139e <MDIO_voidTogglePinValue+0xfc>
		case PORTC: TOGGLE_BIT(PORTC_REG,A_DIOPin); break;
    1350:	a5 e3       	ldi	r26, 0x35	; 53
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <MDIO_voidTogglePinValue+0xcc>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <MDIO_voidTogglePinValue+0xc8>
    1372:	84 27       	eor	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	13 c0       	rjmp	.+38     	; 0x139e <MDIO_voidTogglePinValue+0xfc>
		case PORTD: TOGGLE_BIT(PORTD_REG,A_DIOPin); break;
    1378:	a2 e3       	ldi	r26, 0x32	; 50
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e2 e3       	ldi	r30, 0x32	; 50
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <MDIO_voidTogglePinValue+0xf4>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <MDIO_voidTogglePinValue+0xf0>
    139a:	84 27       	eor	r24, r20
    139c:	8c 93       	st	X, r24
		default : break;
		}
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <MDIO_PinStatusGetPin>:

PIN_STATUS MDIO_PinStatusGetPin(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <MDIO_PinStatusGetPin+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <MDIO_PinStatusGetPin+0x8>
    13b4:	0f 92       	push	r0
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	8a 83       	std	Y+2, r24	; 0x02
    13bc:	6b 83       	std	Y+3, r22	; 0x03
	PIN_STATUS PinValue ;
	if( (A_DIOPort <= PORTD) && (A_DIOPin <= PIN7) )
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	84 30       	cpi	r24, 0x04	; 4
    13c2:	08 f0       	brcs	.+2      	; 0x13c6 <MDIO_PinStatusGetPin+0x1a>
    13c4:	6b c0       	rjmp	.+214    	; 0x149c <MDIO_PinStatusGetPin+0xf0>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <MDIO_PinStatusGetPin+0x22>
    13cc:	67 c0       	rjmp	.+206    	; 0x149c <MDIO_PinStatusGetPin+0xf0>
		{
			switch(A_DIOPort)
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	3d 83       	std	Y+5, r19	; 0x05
    13d6:	2c 83       	std	Y+4, r18	; 0x04
    13d8:	4c 81       	ldd	r20, Y+4	; 0x04
    13da:	5d 81       	ldd	r21, Y+5	; 0x05
    13dc:	41 30       	cpi	r20, 0x01	; 1
    13de:	51 05       	cpc	r21, r1
    13e0:	41 f1       	breq	.+80     	; 0x1432 <MDIO_PinStatusGetPin+0x86>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	91 05       	cpc	r25, r1
    13ea:	34 f4       	brge	.+12     	; 0x13f8 <MDIO_PinStatusGetPin+0x4c>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	21 15       	cp	r18, r1
    13f2:	31 05       	cpc	r19, r1
    13f4:	61 f0       	breq	.+24     	; 0x140e <MDIO_PinStatusGetPin+0x62>
    13f6:	52 c0       	rjmp	.+164    	; 0x149c <MDIO_PinStatusGetPin+0xf0>
    13f8:	4c 81       	ldd	r20, Y+4	; 0x04
    13fa:	5d 81       	ldd	r21, Y+5	; 0x05
    13fc:	42 30       	cpi	r20, 0x02	; 2
    13fe:	51 05       	cpc	r21, r1
    1400:	51 f1       	breq	.+84     	; 0x1456 <MDIO_PinStatusGetPin+0xaa>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	b9 f1       	breq	.+110    	; 0x147a <MDIO_PinStatusGetPin+0xce>
    140c:	47 c0       	rjmp	.+142    	; 0x149c <MDIO_PinStatusGetPin+0xf0>
			{
			case PORTA: PinValue = GET_BIT(PINA_REG,A_DIOPin); break;
    140e:	e9 e3       	ldi	r30, 0x39	; 57
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <MDIO_PinStatusGetPin+0x7a>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <MDIO_PinStatusGetPin+0x76>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	35 c0       	rjmp	.+106    	; 0x149c <MDIO_PinStatusGetPin+0xf0>
			case PORTB: PinValue = GET_BIT(PINB_REG,A_DIOPin); break;
    1432:	e6 e3       	ldi	r30, 0x36	; 54
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_PinStatusGetPin+0x9e>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_PinStatusGetPin+0x9a>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	23 c0       	rjmp	.+70     	; 0x149c <MDIO_PinStatusGetPin+0xf0>
			case PORTC: PinValue = GET_BIT(PINC_REG,A_DIOPin); break;
    1456:	e3 e3       	ldi	r30, 0x33	; 51
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <MDIO_PinStatusGetPin+0xc2>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <MDIO_PinStatusGetPin+0xbe>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	11 c0       	rjmp	.+34     	; 0x149c <MDIO_PinStatusGetPin+0xf0>
			case PORTD: PinValue = GET_BIT(PIND_REG,A_DIOPin); break;
    147a:	e0 e3       	ldi	r30, 0x30	; 48
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <MDIO_PinStatusGetPin+0xe6>
    148e:	55 95       	asr	r21
    1490:	47 95       	ror	r20
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <MDIO_PinStatusGetPin+0xe2>
    1496:	ca 01       	movw	r24, r20
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
			default : break;
			}
		}
	return PinValue;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <MDIO_voidSetPortDirection>:

void MDIO_voidSetPortDirection(DIO_PORTS A_DIOPort ,u8 A_u8PortDirection )
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <MDIO_voidSetPortDirection+0x6>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <MDIO_voidSetPortDirection+0x8>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	6a 83       	std	Y+2, r22	; 0x02
	if( A_DIOPort <= PORTD)
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	90 f5       	brcc	.+100    	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
		{
			switch(A_DIOPort)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	2b 83       	std	Y+3, r18	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <MDIO_voidSetPortDirection+0x5e>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <MDIO_voidSetPortDirection+0x3e>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	61 f0       	breq	.+24     	; 0x1502 <MDIO_voidSetPortDirection+0x54>
    14ea:	1e c0       	rjmp	.+60     	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <MDIO_voidSetPortDirection+0x68>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	81 f0       	breq	.+32     	; 0x1520 <MDIO_voidSetPortDirection+0x72>
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
			{
			case PORTA: DDRA_REG = A_u8PortDirection ; break;
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	0e c0       	rjmp	.+28     	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
			case PORTB: DDRB_REG = A_u8PortDirection ; break;
    150c:	e7 e3       	ldi	r30, 0x37	; 55
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
			case PORTC: DDRC_REG = A_u8PortDirection ; break;
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <MDIO_voidSetPortDirection+0x7a>
			case PORTD: DDRD_REG = A_u8PortDirection ; break;
    1520:	e1 e3       	ldi	r30, 0x31	; 49
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	80 83       	st	Z, r24
			default : break;
			}
		}
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <MDIO_voidSetPortValue>:

void MDIO_voidSetPortValue(DIO_PORTS A_DIOPort ,u8 A_u8PortValue )
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <MDIO_voidSetPortValue+0x6>
    153c:	00 d0       	rcall	.+0      	; 0x153e <MDIO_voidSetPortValue+0x8>
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6a 83       	std	Y+2, r22	; 0x02
	if( A_DIOPort <= PORTD)
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	90 f5       	brcc	.+100    	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
		{
			switch(A_DIOPort)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	d1 f0       	breq	.+52     	; 0x1594 <MDIO_voidSetPortValue+0x5e>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	2c f4       	brge	.+10     	; 0x1574 <MDIO_voidSetPortValue+0x3e>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	61 f0       	breq	.+24     	; 0x158a <MDIO_voidSetPortValue+0x54>
    1572:	1e c0       	rjmp	.+60     	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	81 f0       	breq	.+32     	; 0x159e <MDIO_voidSetPortValue+0x68>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	91 05       	cpc	r25, r1
    1586:	81 f0       	breq	.+32     	; 0x15a8 <MDIO_voidSetPortValue+0x72>
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
			{
			case PORTA: PORTA_REG = A_u8PortValue ; break;
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	0e c0       	rjmp	.+28     	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
			case PORTB: PORTB_REG = A_u8PortValue ; break;
    1594:	e8 e3       	ldi	r30, 0x38	; 56
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
    159c:	09 c0       	rjmp	.+18     	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
			case PORTC: PORTC_REG = A_u8PortValue ; break;
    159e:	e5 e3       	ldi	r30, 0x35	; 53
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	80 83       	st	Z, r24
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <MDIO_voidSetPortValue+0x7a>
			case PORTD: PORTD_REG = A_u8PortValue ; break;
    15a8:	e2 e3       	ldi	r30, 0x32	; 50
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	80 83       	st	Z, r24
			default : break;
			}
		}
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <MEXTI_voidConfig>:
#include "../include/MCAL/EXTERNAL_INTERRUPT/External_INT_interface.h"
#include "../include/MCAL/EXTERNAL_INTERRUPT/External_INT_Privat.h"
#include "../include/MCAL/EXTERNAL_INTERRUPT/External_INT_cfg.h"

void MEXTI_voidConfig(EXTI_ID A_EXTI_ID , EXTI_SENSE_MODE A_EXTI_SENSE_MODE)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <MEXTI_voidConfig+0x6>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <MEXTI_voidConfig+0x8>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <MEXTI_voidConfig+0xa>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	6a 83       	std	Y+2, r22	; 0x02
	if((A_EXTI_ID <= EXTI2)&&(A_EXTI_SENSE_MODE <= RISING_EDGE))
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <MEXTI_voidConfig+0x1a>
    15d6:	5e c0       	rjmp	.+188    	; 0x1694 <MEXTI_voidConfig+0xd6>
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <MEXTI_voidConfig+0x22>
    15de:	5a c0       	rjmp	.+180    	; 0x1694 <MEXTI_voidConfig+0xd6>
	{
		switch (A_EXTI_ID)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3e 83       	std	Y+6, r19	; 0x06
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	d1 f0       	breq	.+52     	; 0x1628 <MEXTI_voidConfig+0x6a>
    15f4:	2d 81       	ldd	r18, Y+5	; 0x05
    15f6:	3e 81       	ldd	r19, Y+6	; 0x06
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	61 f1       	breq	.+88     	; 0x1656 <MEXTI_voidConfig+0x98>
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	09 f0       	breq	.+2      	; 0x1608 <MEXTI_voidConfig+0x4a>
    1606:	46 c0       	rjmp	.+140    	; 0x1694 <MEXTI_voidConfig+0xd6>
		{
			case EXTI0:
				MCUCR_REG &= ~(SENSE_MODE_MASK <<EXTI0_SENSE_MODE_BITS);//~(3<<0)//clear first two bit
    1608:	a5 e5       	ldi	r26, 0x55	; 85
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e5       	ldi	r30, 0x55	; 85
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8c 7f       	andi	r24, 0xFC	; 252
    1614:	8c 93       	st	X, r24
				MCUCR_REG |= (A_EXTI_SENSE_MODE << EXTI0_SENSE_MODE_BITS);//(sense_mode<<0)
    1616:	a5 e5       	ldi	r26, 0x55	; 85
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e5       	ldi	r30, 0x55	; 85
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	90 81       	ld	r25, Z
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	89 2b       	or	r24, r25
    1624:	8c 93       	st	X, r24
    1626:	36 c0       	rjmp	.+108    	; 0x1694 <MEXTI_voidConfig+0xd6>
				break;
			case EXTI1:
				MCUCR_REG &= ~(SENSE_MODE_MASK <<EXTI1_SENSE_MODE_BITS);//~(3<<2)
    1628:	a5 e5       	ldi	r26, 0x55	; 85
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e5       	ldi	r30, 0x55	; 85
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	83 7f       	andi	r24, 0xF3	; 243
    1634:	8c 93       	st	X, r24
				MCUCR_REG |= (A_EXTI_SENSE_MODE << EXTI1_SENSE_MODE_BITS);
    1636:	a5 e5       	ldi	r26, 0x55	; 85
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e5       	ldi	r30, 0x55	; 85
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	28 2f       	mov	r18, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	82 2b       	or	r24, r18
    1652:	8c 93       	st	X, r24
    1654:	1f c0       	rjmp	.+62     	; 0x1694 <MEXTI_voidConfig+0xd6>
				break;
			case EXTI2:
				switch (A_EXTI_SENSE_MODE)
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	82 30       	cpi	r24, 0x02	; 2
    1666:	91 05       	cpc	r25, r1
    1668:	31 f0       	breq	.+12     	; 0x1676 <MEXTI_voidConfig+0xb8>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	23 30       	cpi	r18, 0x03	; 3
    1670:	31 05       	cpc	r19, r1
    1672:	49 f0       	breq	.+18     	; 0x1686 <MEXTI_voidConfig+0xc8>
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <MEXTI_voidConfig+0xd6>
				{
					case FALLING_EDGE: CLR_BIT(MCUCSR_REG,EXTI2_SENSE_MODE_BITS); break;
    1676:	a4 e5       	ldi	r26, 0x54	; 84
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e4 e5       	ldi	r30, 0x54	; 84
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8f 7b       	andi	r24, 0xBF	; 191
    1682:	8c 93       	st	X, r24
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <MEXTI_voidConfig+0xd6>
					case RISING_EDGE: SET_BIT(MCUCSR_REG,EXTI2_SENSE_MODE_BITS); break;
    1686:	a4 e5       	ldi	r26, 0x54	; 84
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e4 e5       	ldi	r30, 0x54	; 84
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 64       	ori	r24, 0x40	; 64
    1692:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
	}
}
    1694:	26 96       	adiw	r28, 0x06	; 6
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <MEXTI_voidEnable>:
void MEXTI_voidEnable(EXTI_ID A_EXTI_ID)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <MEXTI_voidEnable+0x6>
    16ac:	0f 92       	push	r0
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	83 30       	cpi	r24, 0x03	; 3
    16b8:	50 f5       	brcc	.+84     	; 0x170e <MEXTI_voidEnable+0x68>
	{
		switch (A_EXTI_ID)
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3b 83       	std	Y+3, r19	; 0x03
    16c2:	2a 83       	std	Y+2, r18	; 0x02
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	89 f0       	breq	.+34     	; 0x16f0 <MEXTI_voidEnable+0x4a>
    16ce:	2a 81       	ldd	r18, Y+2	; 0x02
    16d0:	3b 81       	ldd	r19, Y+3	; 0x03
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	a1 f0       	breq	.+40     	; 0x1700 <MEXTI_voidEnable+0x5a>
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	9b 81       	ldd	r25, Y+3	; 0x03
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	b9 f4       	brne	.+46     	; 0x170e <MEXTI_voidEnable+0x68>
		{
			case EXTI0:
				SET_BIT(GICR_REG,EXTI0_ENABLE_BIT);
    16e0:	ab e5       	ldi	r26, 0x5B	; 91
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e5       	ldi	r30, 0x5B	; 91
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	8c 93       	st	X, r24
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <MEXTI_voidEnable+0x68>
				break;
			case EXTI1:
				SET_BIT(GICR_REG,EXTI1_ENABLE_BIT);
    16f0:	ab e5       	ldi	r26, 0x5B	; 91
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	eb e5       	ldi	r30, 0x5B	; 91
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	8c 93       	st	X, r24
    16fe:	07 c0       	rjmp	.+14     	; 0x170e <MEXTI_voidEnable+0x68>
				break;
			case EXTI2:
				SET_BIT(GICR_REG,EXTI2_ENABLE_BIT);
    1700:	ab e5       	ldi	r26, 0x5B	; 91
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e5       	ldi	r30, 0x5B	; 91
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	80 62       	ori	r24, 0x20	; 32
    170c:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
	}
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <MEXTI_voidDisable>:
void MEXTI_voidDisable(EXTI_ID A_EXTI_ID)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <MEXTI_voidDisable+0x6>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	50 f5       	brcc	.+84     	; 0x1782 <MEXTI_voidDisable+0x68>
	{
		switch (A_EXTI_ID)
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3b 83       	std	Y+3, r19	; 0x03
    1736:	2a 83       	std	Y+2, r18	; 0x02
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	89 f0       	breq	.+34     	; 0x1764 <MEXTI_voidDisable+0x4a>
    1742:	2a 81       	ldd	r18, Y+2	; 0x02
    1744:	3b 81       	ldd	r19, Y+3	; 0x03
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	a1 f0       	breq	.+40     	; 0x1774 <MEXTI_voidDisable+0x5a>
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	9b 81       	ldd	r25, Y+3	; 0x03
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	b9 f4       	brne	.+46     	; 0x1782 <MEXTI_voidDisable+0x68>
		{
			case EXTI0:
				CLR_BIT(GICR_REG,EXTI0_ENABLE_BIT);
    1754:	ab e5       	ldi	r26, 0x5B	; 91
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e5       	ldi	r30, 0x5B	; 91
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	8f 7b       	andi	r24, 0xBF	; 191
    1760:	8c 93       	st	X, r24
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <MEXTI_voidDisable+0x68>
				break;
			case EXTI1:
				CLR_BIT(GICR_REG,EXTI1_ENABLE_BIT);
    1764:	ab e5       	ldi	r26, 0x5B	; 91
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e5       	ldi	r30, 0x5B	; 91
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8f 77       	andi	r24, 0x7F	; 127
    1770:	8c 93       	st	X, r24
    1772:	07 c0       	rjmp	.+14     	; 0x1782 <MEXTI_voidDisable+0x68>
				break;
			case EXTI2:
				CLR_BIT(GICR_REG,EXTI2_ENABLE_BIT);
    1774:	ab e5       	ldi	r26, 0x5B	; 91
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	eb e5       	ldi	r30, 0x5B	; 91
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8f 7d       	andi	r24, 0xDF	; 223
    1780:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
	}
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <MEXTI_voidClearFlag>:
void MEXTI_voidClearFlag(EXTI_ID A_EXTI_ID)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <MEXTI_voidClearFlag+0x6>
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
	if(A_EXTI_ID <= EXTI2)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	50 f5       	brcc	.+84     	; 0x17f6 <MEXTI_voidClearFlag+0x68>
	{
		switch (A_EXTI_ID)
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3b 83       	std	Y+3, r19	; 0x03
    17aa:	2a 83       	std	Y+2, r18	; 0x02
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	81 30       	cpi	r24, 0x01	; 1
    17b2:	91 05       	cpc	r25, r1
    17b4:	89 f0       	breq	.+34     	; 0x17d8 <MEXTI_voidClearFlag+0x4a>
    17b6:	2a 81       	ldd	r18, Y+2	; 0x02
    17b8:	3b 81       	ldd	r19, Y+3	; 0x03
    17ba:	22 30       	cpi	r18, 0x02	; 2
    17bc:	31 05       	cpc	r19, r1
    17be:	a1 f0       	breq	.+40     	; 0x17e8 <MEXTI_voidClearFlag+0x5a>
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	b9 f4       	brne	.+46     	; 0x17f6 <MEXTI_voidClearFlag+0x68>
		{
			case EXTI0:
				SET_BIT(GIFR_REG,EXTI0_FLAG_BIT);
    17c8:	aa e5       	ldi	r26, 0x5A	; 90
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea e5       	ldi	r30, 0x5A	; 90
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 64       	ori	r24, 0x40	; 64
    17d4:	8c 93       	st	X, r24
    17d6:	0f c0       	rjmp	.+30     	; 0x17f6 <MEXTI_voidClearFlag+0x68>
				break;
			case EXTI1:
				SET_BIT(GIFR_REG,EXTI1_FLAG_BIT);
    17d8:	aa e5       	ldi	r26, 0x5A	; 90
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	ea e5       	ldi	r30, 0x5A	; 90
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 68       	ori	r24, 0x80	; 128
    17e4:	8c 93       	st	X, r24
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <MEXTI_voidClearFlag+0x68>
				break;
			case EXTI2:
				SET_BIT(GIFR_REG,EXTI2_FLAG_BIT);
    17e8:	aa e5       	ldi	r26, 0x5A	; 90
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ea e5       	ldi	r30, 0x5A	; 90
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 62       	ori	r24, 0x20	; 32
    17f4:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
	}
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <MEXTI_voidSetCallBack>:
void(*EXTI0_Callback)(void) = NULL;
void(*EXTI1_Callback)(void) = NULL;
void(*EXTI2_Callback)(void) = NULL;

void MEXTI_voidSetCallBack(EXTI_ID A_EXTI_ID,void(*ptrToFUNC)(void))
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <MEXTI_voidSetCallBack+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <MEXTI_voidSetCallBack+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	7b 83       	std	Y+3, r23	; 0x03
    1814:	6a 83       	std	Y+2, r22	; 0x02
	if((A_EXTI_ID <= EXTI2)&&(ptrToFUNC!=NULL))
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	58 f5       	brcc	.+86     	; 0x1872 <MEXTI_voidSetCallBack+0x70>
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	9b 81       	ldd	r25, Y+3	; 0x03
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	39 f1       	breq	.+78     	; 0x1872 <MEXTI_voidSetCallBack+0x70>
	{
		switch (A_EXTI_ID)
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3d 83       	std	Y+5, r19	; 0x05
    182c:	2c 83       	std	Y+4, r18	; 0x04
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	81 f0       	breq	.+32     	; 0x1858 <MEXTI_voidSetCallBack+0x56>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	91 f0       	breq	.+36     	; 0x1866 <MEXTI_voidSetCallBack+0x64>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	a1 f4       	brne	.+40     	; 0x1872 <MEXTI_voidSetCallBack+0x70>
		{
			case EXTI0:
				EXTI0_Callback = ptrToFUNC;
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	90 93 79 02 	sts	0x0279, r25
    1852:	80 93 78 02 	sts	0x0278, r24
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <MEXTI_voidSetCallBack+0x70>
				break;
			case EXTI1:
				EXTI1_Callback = ptrToFUNC;
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	90 93 7b 02 	sts	0x027B, r25
    1860:	80 93 7a 02 	sts	0x027A, r24
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <MEXTI_voidSetCallBack+0x70>
				break;
			case EXTI2:
				EXTI2_Callback = ptrToFUNC;
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	90 93 7d 02 	sts	0x027D, r25
    186e:	80 93 7c 02 	sts	0x027C, r24
				break;
			default:
				break;
		}
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <__vector_1>:


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1882:	1f 92       	push	r1
    1884:	0f 92       	push	r0
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	0f 92       	push	r0
    188a:	11 24       	eor	r1, r1
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	ef 93       	push	r30
    18a2:	ff 93       	push	r31
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Callback != NULL)
    18ac:	80 91 78 02 	lds	r24, 0x0278
    18b0:	90 91 79 02 	lds	r25, 0x0279
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	29 f0       	breq	.+10     	; 0x18c2 <__vector_1+0x40>
	{EXTI0_Callback();}
    18b8:	e0 91 78 02 	lds	r30, 0x0278
    18bc:	f0 91 79 02 	lds	r31, 0x0279
    18c0:	09 95       	icall
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	ff 91       	pop	r31
    18c8:	ef 91       	pop	r30
    18ca:	bf 91       	pop	r27
    18cc:	af 91       	pop	r26
    18ce:	9f 91       	pop	r25
    18d0:	8f 91       	pop	r24
    18d2:	7f 91       	pop	r23
    18d4:	6f 91       	pop	r22
    18d6:	5f 91       	pop	r21
    18d8:	4f 91       	pop	r20
    18da:	3f 91       	pop	r19
    18dc:	2f 91       	pop	r18
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	0f 90       	pop	r0
    18e4:	1f 90       	pop	r1
    18e6:	18 95       	reti

000018e8 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	2f 93       	push	r18
    18f4:	3f 93       	push	r19
    18f6:	4f 93       	push	r20
    18f8:	5f 93       	push	r21
    18fa:	6f 93       	push	r22
    18fc:	7f 93       	push	r23
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Callback != NULL)
    1912:	80 91 7a 02 	lds	r24, 0x027A
    1916:	90 91 7b 02 	lds	r25, 0x027B
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	29 f0       	breq	.+10     	; 0x1928 <__vector_2+0x40>
	{EXTI1_Callback();}
    191e:	e0 91 7a 02 	lds	r30, 0x027A
    1922:	f0 91 7b 02 	lds	r31, 0x027B
    1926:	09 95       	icall
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_Callback != NULL)
    1978:	80 91 7c 02 	lds	r24, 0x027C
    197c:	90 91 7d 02 	lds	r25, 0x027D
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	29 f0       	breq	.+10     	; 0x198e <__vector_3+0x40>
	{EXTI2_Callback();}
    1984:	e0 91 7c 02 	lds	r30, 0x027C
    1988:	f0 91 7d 02 	lds	r31, 0x027D
    198c:	09 95       	icall
}
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <MGI_voidEnable>:
#include "../Include/MCAL/GI/GI_private.h"
#include "../Include/MCAL/GI/GI_cfg.h"


void MGI_voidEnable (void)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    19bc:	af e5       	ldi	r26, 0x5F	; 95
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e5       	ldi	r30, 0x5F	; 95
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 68       	ori	r24, 0x80	; 128
    19c8:	8c 93       	st	X, r24
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <MGI_voidDisable>:
void MGI_voidDisable (void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    19d8:	af e5       	ldi	r26, 0x5F	; 95
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ef e5       	ldi	r30, 0x5F	; 95
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8f 77       	andi	r24, 0x7F	; 127
    19e4:	8c 93       	st	X, r24
}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <HKEYPAD_u8GetPressdKey>:
u8 static Global_u8ArrOFCols [ROW_NO] = KEYPAD_COLS;



u8 HKEYPAD_u8GetPressdKey(void)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	63 97       	sbiw	r28, 0x13	; 19
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8KeyValue = KEY_NOT_PRESSED;
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	8b 8b       	std	Y+19, r24	; 0x13

	u8 local_u8RowCounter = 0 , local_u8ColCounter = 0 , local_u8PinValue , local_u8flag = 0;
    1a04:	1a 8a       	std	Y+18, r1	; 0x12
    1a06:	19 8a       	std	Y+17, r1	; 0x11
    1a08:	1f 86       	std	Y+15, r1	; 0x0f
	for (local_u8RowCounter = 0; local_u8RowCounter < ROW_NO; local_u8RowCounter++)
    1a0a:	1a 8a       	std	Y+18, r1	; 0x12
    1a0c:	dd c0       	rjmp	.+442    	; 0x1bc8 <HKEYPAD_u8GetPressdKey+0x1dc>
	{
		//active one row
		MDIO_voidSetPinStatus(KEYPAD_PORT , Global_u8ArrOFRows[local_u8RowCounter] , DIO_RESET);
    1a0e:	8a 89       	ldd	r24, Y+18	; 0x12
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	fc 01       	movw	r30, r24
    1a16:	e0 59       	subi	r30, 0x90	; 144
    1a18:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1a:	90 81       	ld	r25, Z
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	69 2f       	mov	r22, r25
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
		for (local_u8ColCounter = 0; local_u8ColCounter < COL_NO ; local_u8ColCounter++)
    1a26:	19 8a       	std	Y+17, r1	; 0x11
    1a28:	b9 c0       	rjmp	.+370    	; 0x1b9c <HKEYPAD_u8GetPressdKey+0x1b0>
		{
			//READ COL
			local_u8PinValue = MDIO_PinStatusGetPin( KEYPAD_PORT , Global_u8ArrOFCols[local_u8ColCounter] );
    1a2a:	89 89       	ldd	r24, Y+17	; 0x11
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	fc 01       	movw	r30, r24
    1a32:	ec 58       	subi	r30, 0x8C	; 140
    1a34:	fd 4f       	sbci	r31, 0xFD	; 253
    1a36:	90 81       	ld	r25, Z
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	69 2f       	mov	r22, r25
    1a3c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MDIO_PinStatusGetPin>
    1a40:	88 8b       	std	Y+16, r24	; 0x10
			if (local_u8PinValue == KEYPAD_PRESSED)
    1a42:	88 89       	ldd	r24, Y+16	; 0x10
    1a44:	88 23       	and	r24, r24
    1a46:	09 f0       	breq	.+2      	; 0x1a4a <HKEYPAD_u8GetPressdKey+0x5e>
    1a48:	a6 c0       	rjmp	.+332    	; 0x1b96 <HKEYPAD_u8GetPressdKey+0x1aa>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 ef       	ldi	r26, 0xF0	; 240
    1a50:	b1 e4       	ldi	r27, 0x41	; 65
    1a52:	8b 87       	std	Y+11, r24	; 0x0b
    1a54:	9c 87       	std	Y+12, r25	; 0x0c
    1a56:	ad 87       	std	Y+13, r26	; 0x0d
    1a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a ef       	ldi	r20, 0xFA	; 250
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	8f 83       	std	Y+7, r24	; 0x07
    1a74:	98 87       	std	Y+8, r25	; 0x08
    1a76:	a9 87       	std	Y+9, r26	; 0x09
    1a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7c:	78 85       	ldd	r23, Y+8	; 0x08
    1a7e:	89 85       	ldd	r24, Y+9	; 0x09
    1a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <HKEYPAD_u8GetPressdKey+0xb0>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	3f c0       	rjmp	.+126    	; 0x1b1a <HKEYPAD_u8GetPressdKey+0x12e>
	else if (__tmp > 65535)
    1a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9e:	78 85       	ldd	r23, Y+8	; 0x08
    1aa0:	89 85       	ldd	r24, Y+9	; 0x09
    1aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	3f ef       	ldi	r19, 0xFF	; 255
    1aa8:	4f e7       	ldi	r20, 0x7F	; 127
    1aaa:	57 e4       	ldi	r21, 0x47	; 71
    1aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab0:	18 16       	cp	r1, r24
    1ab2:	4c f5       	brge	.+82     	; 0x1b06 <HKEYPAD_u8GetPressdKey+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	51 e4       	ldi	r21, 0x41	; 65
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	0f c0       	rjmp	.+30     	; 0x1afc <HKEYPAD_u8GetPressdKey+0x110>
    1ade:	88 ec       	ldi	r24, 0xC8	; 200
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9c 83       	std	Y+4, r25	; 0x04
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <HKEYPAD_u8GetPressdKey+0xfe>
    1aee:	9c 83       	std	Y+4, r25	; 0x04
    1af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	69 f7       	brne	.-38     	; 0x1ade <HKEYPAD_u8GetPressdKey+0xf2>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <HKEYPAD_u8GetPressdKey+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9e 83       	std	Y+6, r25	; 0x06
    1b18:	8d 83       	std	Y+5, r24	; 0x05
    1b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <HKEYPAD_u8GetPressdKey+0x13a>
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
			{
				//delay for bouncing effect
				_delay_ms(KEYPAD_DEPOUSING_DELAY);
				local_u8PinValue = MDIO_PinStatusGetPin( KEYPAD_PORT , Global_u8ArrOFCols[local_u8ColCounter] );
    1b2e:	89 89       	ldd	r24, Y+17	; 0x11
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	fc 01       	movw	r30, r24
    1b36:	ec 58       	subi	r30, 0x8C	; 140
    1b38:	fd 4f       	sbci	r31, 0xFD	; 253
    1b3a:	90 81       	ld	r25, Z
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	69 2f       	mov	r22, r25
    1b40:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MDIO_PinStatusGetPin>
    1b44:	88 8b       	std	Y+16, r24	; 0x10
				if (local_u8PinValue == KEYPAD_PRESSED)
    1b46:	88 89       	ldd	r24, Y+16	; 0x10
    1b48:	88 23       	and	r24, r24
    1b4a:	29 f5       	brne	.+74     	; 0x1b96 <HKEYPAD_u8GetPressdKey+0x1aa>
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <HKEYPAD_u8GetPressdKey+0x17a>
				{
					while(local_u8PinValue == KEYPAD_PRESSED)
					{
						local_u8PinValue = MDIO_PinStatusGetPin( KEYPAD_PORT , Global_u8ArrOFCols[local_u8ColCounter] );
    1b4e:	89 89       	ldd	r24, Y+17	; 0x11
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	fc 01       	movw	r30, r24
    1b56:	ec 58       	subi	r30, 0x8C	; 140
    1b58:	fd 4f       	sbci	r31, 0xFD	; 253
    1b5a:	90 81       	ld	r25, Z
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	69 2f       	mov	r22, r25
    1b60:	0e 94 d6 09 	call	0x13ac	; 0x13ac <MDIO_PinStatusGetPin>
    1b64:	88 8b       	std	Y+16, r24	; 0x10
				//delay for bouncing effect
				_delay_ms(KEYPAD_DEPOUSING_DELAY);
				local_u8PinValue = MDIO_PinStatusGetPin( KEYPAD_PORT , Global_u8ArrOFCols[local_u8ColCounter] );
				if (local_u8PinValue == KEYPAD_PRESSED)
				{
					while(local_u8PinValue == KEYPAD_PRESSED)
    1b66:	88 89       	ldd	r24, Y+16	; 0x10
    1b68:	88 23       	and	r24, r24
    1b6a:	89 f3       	breq	.-30     	; 0x1b4e <HKEYPAD_u8GetPressdKey+0x162>
					{
						local_u8PinValue = MDIO_PinStatusGetPin( KEYPAD_PORT , Global_u8ArrOFCols[local_u8ColCounter] );
					}

					local_u8KeyValue = Global_u8ArrOFKeyValues[local_u8RowCounter][local_u8ColCounter];
    1b6c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b6e:	48 2f       	mov	r20, r24
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	89 89       	ldd	r24, Y+17	; 0x11
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	ca 01       	movw	r24, r20
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	82 0f       	add	r24, r18
    1b84:	93 1f       	adc	r25, r19
    1b86:	fc 01       	movw	r30, r24
    1b88:	e0 5a       	subi	r30, 0xA0	; 160
    1b8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
					local_u8flag = FLAG_UP;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	8f 87       	std	Y+15, r24	; 0x0f
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <HKEYPAD_u8GetPressdKey+0x1b8>
	u8 local_u8RowCounter = 0 , local_u8ColCounter = 0 , local_u8PinValue , local_u8flag = 0;
	for (local_u8RowCounter = 0; local_u8RowCounter < ROW_NO; local_u8RowCounter++)
	{
		//active one row
		MDIO_voidSetPinStatus(KEYPAD_PORT , Global_u8ArrOFRows[local_u8RowCounter] , DIO_RESET);
		for (local_u8ColCounter = 0; local_u8ColCounter < COL_NO ; local_u8ColCounter++)
    1b96:	89 89       	ldd	r24, Y+17	; 0x11
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	89 8b       	std	Y+17, r24	; 0x11
    1b9c:	89 89       	ldd	r24, Y+17	; 0x11
    1b9e:	84 30       	cpi	r24, 0x04	; 4
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <HKEYPAD_u8GetPressdKey+0x1b8>
    1ba2:	43 cf       	rjmp	.-378    	; 0x1a2a <HKEYPAD_u8GetPressdKey+0x3e>
				}
			}
		}

		//deactive row
		MDIO_voidSetPinStatus(KEYPAD_PORT , Global_u8ArrOFRows[local_u8RowCounter] , DIO_SET);
    1ba4:	8a 89       	ldd	r24, Y+18	; 0x12
    1ba6:	88 2f       	mov	r24, r24
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	fc 01       	movw	r30, r24
    1bac:	e0 59       	subi	r30, 0x90	; 144
    1bae:	fd 4f       	sbci	r31, 0xFD	; 253
    1bb0:	90 81       	ld	r25, Z
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	69 2f       	mov	r22, r25
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
		if (local_u8flag == FLAG_UP)
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <HKEYPAD_u8GetPressdKey+0x1e4>
u8 HKEYPAD_u8GetPressdKey(void)
{
	u8 local_u8KeyValue = KEY_NOT_PRESSED;

	u8 local_u8RowCounter = 0 , local_u8ColCounter = 0 , local_u8PinValue , local_u8flag = 0;
	for (local_u8RowCounter = 0; local_u8RowCounter < ROW_NO; local_u8RowCounter++)
    1bc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	8a 8b       	std	Y+18, r24	; 0x12
    1bc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1bca:	84 30       	cpi	r24, 0x04	; 4
    1bcc:	08 f4       	brcc	.+2      	; 0x1bd0 <HKEYPAD_u8GetPressdKey+0x1e4>
    1bce:	1f cf       	rjmp	.-450    	; 0x1a0e <HKEYPAD_u8GetPressdKey+0x22>
		}
	}



	return local_u8KeyValue;
    1bd0:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1bd2:	63 96       	adiw	r28, 0x13	; 19
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <HLCD_voidSendCommend>:
#include  "../include/HAL/LCD/LCD_interface.h"
#include  "../include/HAL/LCD/LCD_private.h"
#include  "../include/HAL/LCD/LCD_cfg.h"

void HLCD_voidSendCommend(u8 A_u8Command)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	2f 97       	sbiw	r28, 0x0f	; 15
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
	//RS--> 0, RW --> 0
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_RS_PIN , DIO_RESET);
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_RW_PIN , DIO_RESET);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>

	//set data port with command
	MDIO_voidSetPortValue(LCD_DATA_PORT , A_u8Command);
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c12:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>

	//set pulse on E pin with 2ms delay
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_E_PIN , DIO_RESET);
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	62 e0       	ldi	r22, 0x02	; 2
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	b0 e4       	ldi	r27, 0x40	; 64
    1c28:	8b 87       	std	Y+11, r24	; 0x0b
    1c2a:	9c 87       	std	Y+12, r25	; 0x0c
    1c2c:	ad 87       	std	Y+13, r26	; 0x0d
    1c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	4a ef       	ldi	r20, 0xFA	; 250
    1c3e:	54 e4       	ldi	r21, 0x44	; 68
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	98 87       	std	Y+8, r25	; 0x08
    1c4c:	a9 87       	std	Y+9, r26	; 0x09
    1c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c50:	6f 81       	ldd	r22, Y+7	; 0x07
    1c52:	78 85       	ldd	r23, Y+8	; 0x08
    1c54:	89 85       	ldd	r24, Y+9	; 0x09
    1c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5f e3       	ldi	r21, 0x3F	; 63
    1c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c64:	88 23       	and	r24, r24
    1c66:	2c f4       	brge	.+10     	; 0x1c72 <HLCD_voidSendCommend+0x8e>
		__ticks = 1;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	8d 83       	std	Y+5, r24	; 0x05
    1c70:	3f c0       	rjmp	.+126    	; 0x1cf0 <HLCD_voidSendCommend+0x10c>
	else if (__tmp > 65535)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	3f ef       	ldi	r19, 0xFF	; 255
    1c7e:	4f e7       	ldi	r20, 0x7F	; 127
    1c80:	57 e4       	ldi	r21, 0x47	; 71
    1c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	4c f5       	brge	.+82     	; 0x1cdc <HLCD_voidSendCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e2       	ldi	r20, 0x20	; 32
    1c98:	51 e4       	ldi	r21, 0x41	; 65
    1c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <HLCD_voidSendCommend+0xee>
    1cb4:	88 ec       	ldi	r24, 0xC8	; 200
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <HLCD_voidSendCommend+0xdc>
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <HLCD_voidSendCommend+0xd0>
    1cda:	14 c0       	rjmp	.+40     	; 0x1d04 <HLCD_voidSendCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9e 83       	std	Y+6, r25	; 0x06
    1cee:	8d 83       	std	Y+5, r24	; 0x05
    1cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <HLCD_voidSendCommend+0x118>
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_E_PIN , DIO_SET);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
}
    1d0e:	2f 96       	adiw	r28, 0x0f	; 15
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 A_u8Data)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	2f 97       	sbiw	r28, 0x0f	; 15
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	8f 87       	std	Y+15, r24	; 0x0f
	//RS--> 1, RW --> 0
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_RS_PIN , DIO_SET);
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_RW_PIN , DIO_RESET);
    1d40:	82 e0       	ldi	r24, 0x02	; 2
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>

	//set data port with command
	MDIO_voidSetPortValue(LCD_DATA_PORT , A_u8Data);
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d4e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>

	//set pulse on E pin with 2ms delay
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_E_PIN , DIO_RESET);
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	62 e0       	ldi	r22, 0x02	; 2
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	a0 e0       	ldi	r26, 0x00	; 0
    1d62:	b0 e4       	ldi	r27, 0x40	; 64
    1d64:	8b 87       	std	Y+11, r24	; 0x0b
    1d66:	9c 87       	std	Y+12, r25	; 0x0c
    1d68:	ad 87       	std	Y+13, r26	; 0x0d
    1d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8f 83       	std	Y+7, r24	; 0x07
    1d86:	98 87       	std	Y+8, r25	; 0x08
    1d88:	a9 87       	std	Y+9, r26	; 0x09
    1d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8e:	78 85       	ldd	r23, Y+8	; 0x08
    1d90:	89 85       	ldd	r24, Y+9	; 0x09
    1d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9e 83       	std	Y+6, r25	; 0x06
    1daa:	8d 83       	std	Y+5, r24	; 0x05
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f e7       	ldi	r20, 0x7F	; 127
    1dbc:	57 e4       	ldi	r21, 0x47	; 71
    1dbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e2       	ldi	r20, 0x20	; 32
    1dd4:	51 e4       	ldi	r21, 0x41	; 65
    1dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <HLCD_voidSendData+0xee>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 83       	std	Y+4, r25	; 0x04
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <HLCD_voidSendData+0xdc>
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8d 81       	ldd	r24, Y+5	; 0x05
    1e06:	9e 81       	ldd	r25, Y+6	; 0x06
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <HLCD_voidSendData+0xd0>
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6f 81       	ldd	r22, Y+7	; 0x07
    1e1a:	78 85       	ldd	r23, Y+8	; 0x08
    1e1c:	89 85       	ldd	r24, Y+9	; 0x09
    1e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9e 83       	std	Y+6, r25	; 0x06
    1e2a:	8d 83       	std	Y+5, r24	; 0x05
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	9a 83       	std	Y+2, r25	; 0x02
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	9a 81       	ldd	r25, Y+2	; 0x02
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <HLCD_voidSendData+0x118>
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinStatus(LCD_CONTROL_PORT , LCD_E_PIN , DIO_SET);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
}
    1e4a:	2f 96       	adiw	r28, 0x0f	; 15
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	f8 94       	cli
    1e50:	de bf       	out	0x3e, r29	; 62
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <HLCD_voidIntl>:
void HLCD_voidIntl(void)
{
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	e8 97       	sbiw	r28, 0x38	; 56
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a0 e0       	ldi	r26, 0x00	; 0
    1e76:	b2 e4       	ldi	r27, 0x42	; 66
    1e78:	8d ab       	std	Y+53, r24	; 0x35
    1e7a:	9e ab       	std	Y+54, r25	; 0x36
    1e7c:	af ab       	std	Y+55, r26	; 0x37
    1e7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e80:	6d a9       	ldd	r22, Y+53	; 0x35
    1e82:	7e a9       	ldd	r23, Y+54	; 0x36
    1e84:	8f a9       	ldd	r24, Y+55	; 0x37
    1e86:	98 ad       	ldd	r25, Y+56	; 0x38
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	4a ef       	ldi	r20, 0xFA	; 250
    1e8e:	54 e4       	ldi	r21, 0x44	; 68
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	89 ab       	std	Y+49, r24	; 0x31
    1e9a:	9a ab       	std	Y+50, r25	; 0x32
    1e9c:	ab ab       	std	Y+51, r26	; 0x33
    1e9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	40 e8       	ldi	r20, 0x80	; 128
    1eae:	5f e3       	ldi	r21, 0x3F	; 63
    1eb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb4:	88 23       	and	r24, r24
    1eb6:	2c f4       	brge	.+10     	; 0x1ec2 <HLCD_voidIntl+0x66>
		__ticks = 1;
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	98 ab       	std	Y+48, r25	; 0x30
    1ebe:	8f a7       	std	Y+47, r24	; 0x2f
    1ec0:	3f c0       	rjmp	.+126    	; 0x1f40 <HLCD_voidIntl+0xe4>
	else if (__tmp > 65535)
    1ec2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	3f ef       	ldi	r19, 0xFF	; 255
    1ece:	4f e7       	ldi	r20, 0x7F	; 127
    1ed0:	57 e4       	ldi	r21, 0x47	; 71
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed6:	18 16       	cp	r1, r24
    1ed8:	4c f5       	brge	.+82     	; 0x1f2c <HLCD_voidIntl+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eda:	6d a9       	ldd	r22, Y+53	; 0x35
    1edc:	7e a9       	ldd	r23, Y+54	; 0x36
    1ede:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e2       	ldi	r20, 0x20	; 32
    1ee8:	51 e4       	ldi	r21, 0x41	; 65
    1eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	bc 01       	movw	r22, r24
    1ef4:	cd 01       	movw	r24, r26
    1ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	98 ab       	std	Y+48, r25	; 0x30
    1f00:	8f a7       	std	Y+47, r24	; 0x2f
    1f02:	0f c0       	rjmp	.+30     	; 0x1f22 <HLCD_voidIntl+0xc6>
    1f04:	88 ec       	ldi	r24, 0xC8	; 200
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9e a7       	std	Y+46, r25	; 0x2e
    1f0a:	8d a7       	std	Y+45, r24	; 0x2d
    1f0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <HLCD_voidIntl+0xb4>
    1f14:	9e a7       	std	Y+46, r25	; 0x2e
    1f16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	98 ab       	std	Y+48, r25	; 0x30
    1f20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f24:	98 a9       	ldd	r25, Y+48	; 0x30
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	69 f7       	brne	.-38     	; 0x1f04 <HLCD_voidIntl+0xa8>
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <HLCD_voidIntl+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f30:	8b a9       	ldd	r24, Y+51	; 0x33
    1f32:	9c a9       	ldd	r25, Y+52	; 0x34
    1f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	98 ab       	std	Y+48, r25	; 0x30
    1f3e:	8f a7       	std	Y+47, r24	; 0x2f
    1f40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f42:	98 a9       	ldd	r25, Y+48	; 0x30
    1f44:	9c a7       	std	Y+44, r25	; 0x2c
    1f46:	8b a7       	std	Y+43, r24	; 0x2b
    1f48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <HLCD_voidIntl+0xf0>
    1f50:	9c a7       	std	Y+44, r25	; 0x2c
    1f52:	8b a7       	std	Y+43, r24	; 0x2b
	//wait more than 30 second
	_delay_ms(32);
	//function set command
	HLCD_voidSendCommend(FUNCTION_SET);
    1f54:	88 e3       	ldi	r24, 0x38	; 56
    1f56:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e8       	ldi	r26, 0x80	; 128
    1f60:	bf e3       	ldi	r27, 0x3F	; 63
    1f62:	8f a3       	std	Y+39, r24	; 0x27
    1f64:	98 a7       	std	Y+40, r25	; 0x28
    1f66:	a9 a7       	std	Y+41, r26	; 0x29
    1f68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4a ef       	ldi	r20, 0xFA	; 250
    1f78:	54 e4       	ldi	r21, 0x44	; 68
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8b a3       	std	Y+35, r24	; 0x23
    1f84:	9c a3       	std	Y+36, r25	; 0x24
    1f86:	ad a3       	std	Y+37, r26	; 0x25
    1f88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f90:	9e a1       	ldd	r25, Y+38	; 0x26
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <HLCD_voidIntl+0x150>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	9a a3       	std	Y+34, r25	; 0x22
    1fa8:	89 a3       	std	Y+33, r24	; 0x21
    1faa:	3f c0       	rjmp	.+126    	; 0x202a <HLCD_voidIntl+0x1ce>
	else if (__tmp > 65535)
    1fac:	6b a1       	ldd	r22, Y+35	; 0x23
    1fae:	7c a1       	ldd	r23, Y+36	; 0x24
    1fb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	3f ef       	ldi	r19, 0xFF	; 255
    1fb8:	4f e7       	ldi	r20, 0x7F	; 127
    1fba:	57 e4       	ldi	r21, 0x47	; 71
    1fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc0:	18 16       	cp	r1, r24
    1fc2:	4c f5       	brge	.+82     	; 0x2016 <HLCD_voidIntl+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e2       	ldi	r20, 0x20	; 32
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	bc 01       	movw	r22, r24
    1fde:	cd 01       	movw	r24, r26
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9a a3       	std	Y+34, r25	; 0x22
    1fea:	89 a3       	std	Y+33, r24	; 0x21
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <HLCD_voidIntl+0x1b0>
    1fee:	88 ec       	ldi	r24, 0xC8	; 200
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	98 a3       	std	Y+32, r25	; 0x20
    1ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ff6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff8:	98 a1       	ldd	r25, Y+32	; 0x20
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <HLCD_voidIntl+0x19e>
    1ffe:	98 a3       	std	Y+32, r25	; 0x20
    2000:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2002:	89 a1       	ldd	r24, Y+33	; 0x21
    2004:	9a a1       	ldd	r25, Y+34	; 0x22
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	00 97       	sbiw	r24, 0x00	; 0
    2012:	69 f7       	brne	.-38     	; 0x1fee <HLCD_voidIntl+0x192>
    2014:	14 c0       	rjmp	.+40     	; 0x203e <HLCD_voidIntl+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2016:	6b a1       	ldd	r22, Y+35	; 0x23
    2018:	7c a1       	ldd	r23, Y+36	; 0x24
    201a:	8d a1       	ldd	r24, Y+37	; 0x25
    201c:	9e a1       	ldd	r25, Y+38	; 0x26
    201e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	9a a3       	std	Y+34, r25	; 0x22
    2028:	89 a3       	std	Y+33, r24	; 0x21
    202a:	89 a1       	ldd	r24, Y+33	; 0x21
    202c:	9a a1       	ldd	r25, Y+34	; 0x22
    202e:	9e 8f       	std	Y+30, r25	; 0x1e
    2030:	8d 8f       	std	Y+29, r24	; 0x1d
    2032:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2034:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <HLCD_voidIntl+0x1da>
    203a:	9e 8f       	std	Y+30, r25	; 0x1e
    203c:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for more than 39 us
	_delay_ms(1);
	//display on/off control
	HLCD_voidSendCommend(DISPLAY_ON_OFF_CONTROL);
    203e:	8f e0       	ldi	r24, 0x0F	; 15
    2040:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	a0 e8       	ldi	r26, 0x80	; 128
    204a:	bf e3       	ldi	r27, 0x3F	; 63
    204c:	89 8f       	std	Y+25, r24	; 0x19
    204e:	9a 8f       	std	Y+26, r25	; 0x1a
    2050:	ab 8f       	std	Y+27, r26	; 0x1b
    2052:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2054:	69 8d       	ldd	r22, Y+25	; 0x19
    2056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    205a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	4a ef       	ldi	r20, 0xFA	; 250
    2062:	54 e4       	ldi	r21, 0x44	; 68
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	8d 8b       	std	Y+21, r24	; 0x15
    206e:	9e 8b       	std	Y+22, r25	; 0x16
    2070:	af 8b       	std	Y+23, r26	; 0x17
    2072:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2074:	6d 89       	ldd	r22, Y+21	; 0x15
    2076:	7e 89       	ldd	r23, Y+22	; 0x16
    2078:	8f 89       	ldd	r24, Y+23	; 0x17
    207a:	98 8d       	ldd	r25, Y+24	; 0x18
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e8       	ldi	r20, 0x80	; 128
    2082:	5f e3       	ldi	r21, 0x3F	; 63
    2084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2088:	88 23       	and	r24, r24
    208a:	2c f4       	brge	.+10     	; 0x2096 <HLCD_voidIntl+0x23a>
		__ticks = 1;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	9c 8b       	std	Y+20, r25	; 0x14
    2092:	8b 8b       	std	Y+19, r24	; 0x13
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <HLCD_voidIntl+0x2b8>
	else if (__tmp > 65535)
    2096:	6d 89       	ldd	r22, Y+21	; 0x15
    2098:	7e 89       	ldd	r23, Y+22	; 0x16
    209a:	8f 89       	ldd	r24, Y+23	; 0x17
    209c:	98 8d       	ldd	r25, Y+24	; 0x18
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	3f ef       	ldi	r19, 0xFF	; 255
    20a2:	4f e7       	ldi	r20, 0x7F	; 127
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20aa:	18 16       	cp	r1, r24
    20ac:	4c f5       	brge	.+82     	; 0x2100 <HLCD_voidIntl+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ae:	69 8d       	ldd	r22, Y+25	; 0x19
    20b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e2       	ldi	r20, 0x20	; 32
    20bc:	51 e4       	ldi	r21, 0x41	; 65
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	bc 01       	movw	r22, r24
    20c8:	cd 01       	movw	r24, r26
    20ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
    20d6:	0f c0       	rjmp	.+30     	; 0x20f6 <HLCD_voidIntl+0x29a>
    20d8:	88 ec       	ldi	r24, 0xC8	; 200
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9a 8b       	std	Y+18, r25	; 0x12
    20de:	89 8b       	std	Y+17, r24	; 0x11
    20e0:	89 89       	ldd	r24, Y+17	; 0x11
    20e2:	9a 89       	ldd	r25, Y+18	; 0x12
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <HLCD_voidIntl+0x288>
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f7       	brne	.-38     	; 0x20d8 <HLCD_voidIntl+0x27c>
    20fe:	14 c0       	rjmp	.+40     	; 0x2128 <HLCD_voidIntl+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2100:	6d 89       	ldd	r22, Y+21	; 0x15
    2102:	7e 89       	ldd	r23, Y+22	; 0x16
    2104:	8f 89       	ldd	r24, Y+23	; 0x17
    2106:	98 8d       	ldd	r25, Y+24	; 0x18
    2108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	9c 8b       	std	Y+20, r25	; 0x14
    2112:	8b 8b       	std	Y+19, r24	; 0x13
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	98 8b       	std	Y+16, r25	; 0x10
    211a:	8f 87       	std	Y+15, r24	; 0x0f
    211c:	8f 85       	ldd	r24, Y+15	; 0x0f
    211e:	98 89       	ldd	r25, Y+16	; 0x10
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <HLCD_voidIntl+0x2c4>
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for more than 39 us
	_delay_ms(1);
	//DISPLAY_CLEAR
	HLCD_voidSendCommend(DISPLAY_CLEAR);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e0       	ldi	r26, 0x00	; 0
    2134:	b0 e4       	ldi	r27, 0x40	; 64
    2136:	8b 87       	std	Y+11, r24	; 0x0b
    2138:	9c 87       	std	Y+12, r25	; 0x0c
    213a:	ad 87       	std	Y+13, r26	; 0x0d
    213c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a ef       	ldi	r20, 0xFA	; 250
    214c:	54 e4       	ldi	r21, 0x44	; 68
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	8f 83       	std	Y+7, r24	; 0x07
    2158:	98 87       	std	Y+8, r25	; 0x08
    215a:	a9 87       	std	Y+9, r26	; 0x09
    215c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <HLCD_voidIntl+0x324>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <HLCD_voidIntl+0x3a2>
	else if (__tmp > 65535)
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <HLCD_voidIntl+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6b 85       	ldd	r22, Y+11	; 0x0b
    219a:	7c 85       	ldd	r23, Y+12	; 0x0c
    219c:	8d 85       	ldd	r24, Y+13	; 0x0d
    219e:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <HLCD_voidIntl+0x384>
    21c2:	88 ec       	ldi	r24, 0xC8	; 200
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <HLCD_voidIntl+0x372>
    21d2:	9c 83       	std	Y+4, r25	; 0x04
    21d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <HLCD_voidIntl+0x366>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <HLCD_voidIntl+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2200:	9e 81       	ldd	r25, Y+6	; 0x06
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	9a 81       	ldd	r25, Y+2	; 0x02
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <HLCD_voidIntl+0x3ae>
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 1.35 us
	_delay_ms(2);
	//ENTRY MODE SET
	HLCD_voidSendCommend(ENTRY_MODE_SET);
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>


}
    2218:	e8 96       	adiw	r28, 0x38	; 56
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <HLCD_voidSendString>:

void HLCD_voidSendString(u8 *A_Pu8String)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <HLCD_voidSendString+0x6>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <HLCD_voidSendString+0x26>
	while(*A_Pu8String>0)
	{
		HLCD_voidSendData(*A_Pu8String++);
    223a:	e9 81       	ldd	r30, Y+1	; 0x01
    223c:	fa 81       	ldd	r31, Y+2	; 0x02
    223e:	20 81       	ld	r18, Z
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01
    224a:	82 2f       	mov	r24, r18
    224c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>

}

void HLCD_voidSendString(u8 *A_Pu8String)
{
	while(*A_Pu8String>0)
    2250:	e9 81       	ldd	r30, Y+1	; 0x01
    2252:	fa 81       	ldd	r31, Y+2	; 0x02
    2254:	80 81       	ld	r24, Z
    2256:	88 23       	and	r24, r24
    2258:	81 f7       	brne	.-32     	; 0x223a <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*A_Pu8String++);
	}
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <HLCD_voidClearDiplay>:

void HLCD_voidClearDiplay(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	2e 97       	sbiw	r28, 0x0e	; 14
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
	//DISPLAY_CLEAR
	HLCD_voidSendCommend(DISPLAY_CLEAR);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	b0 e4       	ldi	r27, 0x40	; 64
    2286:	8b 87       	std	Y+11, r24	; 0x0b
    2288:	9c 87       	std	Y+12, r25	; 0x0c
    228a:	ad 87       	std	Y+13, r26	; 0x0d
    228c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2290:	7c 85       	ldd	r23, Y+12	; 0x0c
    2292:	8d 85       	ldd	r24, Y+13	; 0x0d
    2294:	9e 85       	ldd	r25, Y+14	; 0x0e
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4a ef       	ldi	r20, 0xFA	; 250
    229c:	54 e4       	ldi	r21, 0x44	; 68
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	8f 83       	std	Y+7, r24	; 0x07
    22a8:	98 87       	std	Y+8, r25	; 0x08
    22aa:	a9 87       	std	Y+9, r26	; 0x09
    22ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ae:	6f 81       	ldd	r22, Y+7	; 0x07
    22b0:	78 85       	ldd	r23, Y+8	; 0x08
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	2c f4       	brge	.+10     	; 0x22d0 <HLCD_voidClearDiplay+0x6c>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	3f c0       	rjmp	.+126    	; 0x234e <HLCD_voidClearDiplay+0xea>
	else if (__tmp > 65535)
    22d0:	6f 81       	ldd	r22, Y+7	; 0x07
    22d2:	78 85       	ldd	r23, Y+8	; 0x08
    22d4:	89 85       	ldd	r24, Y+9	; 0x09
    22d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	3f ef       	ldi	r19, 0xFF	; 255
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	57 e4       	ldi	r21, 0x47	; 71
    22e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	4c f5       	brge	.+82     	; 0x233a <HLCD_voidClearDiplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e2       	ldi	r20, 0x20	; 32
    22f6:	51 e4       	ldi	r21, 0x41	; 65
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
    2310:	0f c0       	rjmp	.+30     	; 0x2330 <HLCD_voidClearDiplay+0xcc>
    2312:	88 ec       	ldi	r24, 0xC8	; 200
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9c 83       	std	Y+4, r25	; 0x04
    2318:	8b 83       	std	Y+3, r24	; 0x03
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <HLCD_voidClearDiplay+0xba>
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	9e 83       	std	Y+6, r25	; 0x06
    232e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	00 97       	sbiw	r24, 0x00	; 0
    2336:	69 f7       	brne	.-38     	; 0x2312 <HLCD_voidClearDiplay+0xae>
    2338:	14 c0       	rjmp	.+40     	; 0x2362 <HLCD_voidClearDiplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	8d 81       	ldd	r24, Y+5	; 0x05
    2350:	9e 81       	ldd	r25, Y+6	; 0x06
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	9a 81       	ldd	r25, Y+2	; 0x02
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <HLCD_voidClearDiplay+0xf6>
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
	//wait for more than 1.35 us
	_delay_ms(2);
}
    2362:	2e 96       	adiw	r28, 0x0e	; 14
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <HLCD_voidGoToPos>:


void HLCD_voidGoToPos(LCD_ROW ALcdRowNo,LCD_COL A_LcdColNo)
{
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	62 97       	sbiw	r28, 0x12	; 18
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	8f 87       	std	Y+15, r24	; 0x0f
    238a:	68 8b       	std	Y+16, r22	; 0x10
	switch(ALcdRowNo)
    238c:	8f 85       	ldd	r24, Y+15	; 0x0f
    238e:	28 2f       	mov	r18, r24
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	3a 8b       	std	Y+18, r19	; 0x12
    2394:	29 8b       	std	Y+17, r18	; 0x11
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	91 05       	cpc	r25, r1
    239e:	31 f0       	breq	.+12     	; 0x23ac <HLCD_voidGoToPos+0x38>
    23a0:	29 89       	ldd	r18, Y+17	; 0x11
    23a2:	3a 89       	ldd	r19, Y+18	; 0x12
    23a4:	22 30       	cpi	r18, 0x02	; 2
    23a6:	31 05       	cpc	r19, r1
    23a8:	31 f0       	breq	.+12     	; 0x23b6 <HLCD_voidGoToPos+0x42>
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <HLCD_voidGoToPos+0x4a>
	{
		case ROW1 : HLCD_voidSendCommend(LCD_ROW1_ADDDRESS + A_LcdColNo);break;
    23ac:	88 89       	ldd	r24, Y+16	; 0x10
    23ae:	81 58       	subi	r24, 0x81	; 129
    23b0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    23b4:	04 c0       	rjmp	.+8      	; 0x23be <HLCD_voidGoToPos+0x4a>
		case ROW2 : HLCD_voidSendCommend(LCD_ROW2_ADDDRESS + A_LcdColNo);break;
    23b6:	88 89       	ldd	r24, Y+16	; 0x10
    23b8:	81 54       	subi	r24, 0x41	; 65
    23ba:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a0 e8       	ldi	r26, 0x80	; 128
    23c4:	bf e3       	ldi	r27, 0x3F	; 63
    23c6:	8b 87       	std	Y+11, r24	; 0x0b
    23c8:	9c 87       	std	Y+12, r25	; 0x0c
    23ca:	ad 87       	std	Y+13, r26	; 0x0d
    23cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	4a ef       	ldi	r20, 0xFA	; 250
    23dc:	54 e4       	ldi	r21, 0x44	; 68
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	8f 83       	std	Y+7, r24	; 0x07
    23e8:	98 87       	std	Y+8, r25	; 0x08
    23ea:	a9 87       	std	Y+9, r26	; 0x09
    23ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ee:	6f 81       	ldd	r22, Y+7	; 0x07
    23f0:	78 85       	ldd	r23, Y+8	; 0x08
    23f2:	89 85       	ldd	r24, Y+9	; 0x09
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	2c f4       	brge	.+10     	; 0x2410 <HLCD_voidGoToPos+0x9c>
		__ticks = 1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9e 83       	std	Y+6, r25	; 0x06
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	3f c0       	rjmp	.+126    	; 0x248e <HLCD_voidGoToPos+0x11a>
	else if (__tmp > 65535)
    2410:	6f 81       	ldd	r22, Y+7	; 0x07
    2412:	78 85       	ldd	r23, Y+8	; 0x08
    2414:	89 85       	ldd	r24, Y+9	; 0x09
    2416:	9a 85       	ldd	r25, Y+10	; 0x0a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	3f ef       	ldi	r19, 0xFF	; 255
    241c:	4f e7       	ldi	r20, 0x7F	; 127
    241e:	57 e4       	ldi	r21, 0x47	; 71
    2420:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2424:	18 16       	cp	r1, r24
    2426:	4c f5       	brge	.+82     	; 0x247a <HLCD_voidGoToPos+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2428:	6b 85       	ldd	r22, Y+11	; 0x0b
    242a:	7c 85       	ldd	r23, Y+12	; 0x0c
    242c:	8d 85       	ldd	r24, Y+13	; 0x0d
    242e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e2       	ldi	r20, 0x20	; 32
    2436:	51 e4       	ldi	r21, 0x41	; 65
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	bc 01       	movw	r22, r24
    2442:	cd 01       	movw	r24, r26
    2444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	0f c0       	rjmp	.+30     	; 0x2470 <HLCD_voidGoToPos+0xfc>
    2452:	88 ec       	ldi	r24, 0xC8	; 200
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9c 83       	std	Y+4, r25	; 0x04
    2458:	8b 83       	std	Y+3, r24	; 0x03
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <HLCD_voidGoToPos+0xea>
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	69 f7       	brne	.-38     	; 0x2452 <HLCD_voidGoToPos+0xde>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <HLCD_voidGoToPos+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <HLCD_voidGoToPos+0x126>
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
		default : break;
	}
	_delay_ms(1);
}
    24a2:	62 96       	adiw	r28, 0x12	; 18
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <HLCD_voidDisplayNumberPositive>:

void HLCD_voidDisplayNumberPositive(u32 A_u32Number)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <HLCD_voidDisplayNumberPositive+0x6>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <HLCD_voidDisplayNumberPositive+0x8>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32Number=1;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
	if (A_u32Number==0)
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	9c 81       	ldd	r25, Y+4	; 0x04
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	31 f5       	brne	.+76     	; 0x2520 <HLCD_voidDisplayNumberPositive+0x6c>
	{
		HLCD_voidSendData('0');
    24d4:	80 e3       	ldi	r24, 0x30	; 48
    24d6:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
    24da:	22 c0       	rjmp	.+68     	; 0x2520 <HLCD_voidDisplayNumberPositive+0x6c>
	}
	while(A_u32Number!=0)
	{
		local_u32Number=((local_u32Number*10)+(A_u32Number%10));
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	9c 01       	movw	r18, r24
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	c9 01       	movw	r24, r18
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	f9 01       	movw	r30, r18
    24f2:	e8 0f       	add	r30, r24
    24f4:	f9 1f       	adc	r31, r25
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	2a e0       	ldi	r18, 0x0A	; 10
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	b9 01       	movw	r22, r18
    2500:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    2504:	8e 0f       	add	r24, r30
    2506:	9f 1f       	adc	r25, r31
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
		A_u32Number/=10;
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	2a e0       	ldi	r18, 0x0A	; 10
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	b9 01       	movw	r22, r18
    2516:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    251a:	cb 01       	movw	r24, r22
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32Number=1;
	if (A_u32Number==0)
	{
		HLCD_voidSendData('0');
	}
	while(A_u32Number!=0)
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	9c 81       	ldd	r25, Y+4	; 0x04
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	d1 f6       	brne	.-76     	; 0x24dc <HLCD_voidDisplayNumberPositive+0x28>
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <HLCD_voidDisplayNumberPositive+0x9e>
		local_u32Number=((local_u32Number*10)+(A_u32Number%10));
		A_u32Number/=10;
	}
	while(local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	2a e0       	ldi	r18, 0x0A	; 10
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	b9 01       	movw	r22, r18
    2534:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    2538:	80 5d       	subi	r24, 0xD0	; 208
    253a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
		local_u32Number /=10;
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	2a e0       	ldi	r18, 0x0A	; 10
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	b9 01       	movw	r22, r18
    2548:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    254c:	cb 01       	movw	r24, r22
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
	while(A_u32Number!=0)
	{
		local_u32Number=((local_u32Number*10)+(A_u32Number%10));
		A_u32Number/=10;
	}
	while(local_u32Number!=1)
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	81 30       	cpi	r24, 0x01	; 1
    2558:	91 05       	cpc	r25, r1
    255a:	39 f7       	brne	.-50     	; 0x252a <HLCD_voidDisplayNumberPositive+0x76>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number /=10;
	}
}
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <HLCD_voidDisplayNumberNegative>:

void HLCD_voidDisplayNumberNegative(s32 A_s32Number)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	00 d0       	rcall	.+0      	; 0x2570 <HLCD_voidDisplayNumberNegative+0x6>
    2570:	00 d0       	rcall	.+0      	; 0x2572 <HLCD_voidDisplayNumberNegative+0x8>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	9c 83       	std	Y+4, r25	; 0x04
    2578:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32Number=1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	if (A_s32Number<0)
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	99 23       	and	r25, r25
    2588:	54 f4       	brge	.+20     	; 0x259e <HLCD_voidDisplayNumberNegative+0x34>
	{
		HLCD_voidSendData('-');
    258a:	8d e2       	ldi	r24, 0x2D	; 45
    258c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
		A_s32Number*=-1;
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	90 95       	com	r25
    2596:	81 95       	neg	r24
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (A_s32Number==0)
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	31 f5       	brne	.+76     	; 0x25f2 <HLCD_voidDisplayNumberNegative+0x88>
	{
		HLCD_voidSendData('0');
    25a6:	80 e3       	ldi	r24, 0x30	; 48
    25a8:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
    25ac:	22 c0       	rjmp	.+68     	; 0x25f2 <HLCD_voidDisplayNumberNegative+0x88>
	}
	while(A_s32Number!=0)
	{
		local_u32Number=((local_u32Number*10)+(A_s32Number%10));
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	9c 01       	movw	r18, r24
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	c9 01       	movw	r24, r18
    25ba:	88 0f       	add	r24, r24
    25bc:	99 1f       	adc	r25, r25
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	f9 01       	movw	r30, r18
    25c4:	e8 0f       	add	r30, r24
    25c6:	f9 1f       	adc	r31, r25
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	2a e0       	ldi	r18, 0x0A	; 10
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	b9 01       	movw	r22, r18
    25d2:	0e 94 a6 1b 	call	0x374c	; 0x374c <__divmodhi4>
    25d6:	8e 0f       	add	r24, r30
    25d8:	9f 1f       	adc	r25, r31
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
		A_s32Number/=10;
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	2a e0       	ldi	r18, 0x0A	; 10
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	b9 01       	movw	r22, r18
    25e8:	0e 94 a6 1b 	call	0x374c	; 0x374c <__divmodhi4>
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	8b 83       	std	Y+3, r24	; 0x03
	}
	if (A_s32Number==0)
	{
		HLCD_voidSendData('0');
	}
	while(A_s32Number!=0)
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	9c 81       	ldd	r25, Y+4	; 0x04
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	d1 f6       	brne	.-76     	; 0x25ae <HLCD_voidDisplayNumberNegative+0x44>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <HLCD_voidDisplayNumberNegative+0xba>
		local_u32Number=((local_u32Number*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while(local_u32Number!=1)
	{
		HLCD_voidSendData((local_u32Number%10)+48);
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2600:	2a e0       	ldi	r18, 0x0A	; 10
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	b9 01       	movw	r22, r18
    2606:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    260a:	80 5d       	subi	r24, 0xD0	; 208
    260c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
		local_u32Number /=10;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	2a e0       	ldi	r18, 0x0A	; 10
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	b9 01       	movw	r22, r18
    261a:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    261e:	cb 01       	movw	r24, r22
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
	while(A_s32Number!=0)
	{
		local_u32Number=((local_u32Number*10)+(A_s32Number%10));
		A_s32Number/=10;
	}
	while(local_u32Number!=1)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	91 05       	cpc	r25, r1
    262c:	39 f7       	brne	.-50     	; 0x25fc <HLCD_voidDisplayNumberNegative+0x92>
	{
		HLCD_voidSendData((local_u32Number%10)+48);
		local_u32Number /=10;
	}
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <HLCD_voidSendSpecialCharecter>:


void HLCD_voidSendSpecialCharecter(u8 *A_u8PatternArr , u8 Au8PatternNumber , LCD_ROW A_LcdRowNo , LCD_COL A_LcdColNo)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	27 97       	sbiw	r28, 0x07	; 7
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
    2654:	6d 83       	std	Y+5, r22	; 0x05
    2656:	4e 83       	std	Y+6, r20	; 0x06
    2658:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8RamAddress;
	//calculate CGRAM Address = Pattern No. * 8
	local_u8RamAddress= Au8PatternNumber * 8;
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	88 2f       	mov	r24, r24
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8RamAddress,6);
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	80 64       	ori	r24, 0x40	; 64
    2672:	8a 83       	std	Y+2, r24	; 0x02
	//send CGRAM Write command
	HLCD_voidSendCommend(local_u8RamAddress);
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <HLCD_voidSendCommend>
	for (u8 i = 0; i < 8; i++)
    267a:	19 82       	std	Y+1, r1	; 0x01
    267c:	0e c0       	rjmp	.+28     	; 0x269a <HLCD_voidSendSpecialCharecter+0x5e>
	{
		HLCD_voidSendData(A_u8PatternArr[i]);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	9c 81       	ldd	r25, Y+4	; 0x04
    2688:	fc 01       	movw	r30, r24
    268a:	e2 0f       	add	r30, r18
    268c:	f3 1f       	adc	r31, r19
    268e:	80 81       	ld	r24, Z
    2690:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
	//calculate CGRAM Address = Pattern No. * 8
	local_u8RamAddress= Au8PatternNumber * 8;
	SET_BIT(local_u8RamAddress,6);
	//send CGRAM Write command
	HLCD_voidSendCommend(local_u8RamAddress);
	for (u8 i = 0; i < 8; i++)
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	88 30       	cpi	r24, 0x08	; 8
    269e:	78 f3       	brcs	.-34     	; 0x267e <HLCD_voidSendSpecialCharecter+0x42>
	{
		HLCD_voidSendData(A_u8PatternArr[i]);
	}
	// send go to position command to the DDRAM
	HLCD_voidGoToPos(A_LcdRowNo , A_LcdColNo);
    26a0:	8e 81       	ldd	r24, Y+6	; 0x06
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	0e 94 ba 11 	call	0x2374	; 0x2374 <HLCD_voidGoToPos>
	//display pattern
	HLCD_voidSendData(Au8PatternNumber);
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HLCD_voidSendData>
}
    26ae:	27 96       	adiw	r28, 0x07	; 7
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	cf 91       	pop	r28
    26bc:	df 91       	pop	r29
    26be:	08 95       	ret

000026c0 <HAL_voidSetLedStatus>:
#include  "../include/HAL/LED/LED_interface.h"
#include  "../include/HAL/LED/LED_private.h"
#include  "../include/HAL/LED/LED_cfg.h"

void HAL_voidSetLedStatus(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin , LED_STATUS A_LedStatus)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <HAL_voidSetLedStatus+0x6>
    26c6:	0f 92       	push	r0
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	6a 83       	std	Y+2, r22	; 0x02
    26d0:	4b 83       	std	Y+3, r20	; 0x03
	MDIO_voidSetPinStatus(A_DIOPort ,A_DIOPin ,A_LedStatus);
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	6a 81       	ldd	r22, Y+2	; 0x02
    26d6:	4b 81       	ldd	r20, Y+3	; 0x03
    26d8:	0e 94 2f 08 	call	0x105e	; 0x105e <MDIO_voidSetPinStatus>
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	cf 91       	pop	r28
    26e4:	df 91       	pop	r29
    26e6:	08 95       	ret

000026e8 <HAL_voidToggleLedStatus>:
void HAL_voidToggleLedStatus(DIO_PORTS A_DIOPort , DIO_PINS A_DIOPin )
{
    26e8:	df 93       	push	r29
    26ea:	cf 93       	push	r28
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <HAL_voidToggleLedStatus+0x6>
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue( A_DIOPort , A_DIOPin );
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	6a 81       	ldd	r22, Y+2	; 0x02
    26fa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <MDIO_voidTogglePinValue>
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <HSSD_DisplayNumber>:
#include  "../include/HAL/SSD/SSD_private.h"
#include  "../include/HAL/SSD/SSD_cfg.h"


void HSSD_DisplayNumber(DIO_PORTS A_DIOPort , u8 A_u8Number)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	00 d0       	rcall	.+0      	; 0x270e <HSSD_DisplayNumber+0x6>
    270e:	00 d0       	rcall	.+0      	; 0x2710 <HSSD_DisplayNumber+0x8>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	89 83       	std	Y+1, r24	; 0x01
    2716:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8Number)
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3c 83       	std	Y+4, r19	; 0x04
    2720:	2b 83       	std	Y+3, r18	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	91 05       	cpc	r25, r1
    272a:	09 f4       	brne	.+2      	; 0x272e <HSSD_DisplayNumber+0x26>
    272c:	55 c0       	rjmp	.+170    	; 0x27d8 <HSSD_DisplayNumber+0xd0>
    272e:	2b 81       	ldd	r18, Y+3	; 0x03
    2730:	3c 81       	ldd	r19, Y+4	; 0x04
    2732:	25 30       	cpi	r18, 0x05	; 5
    2734:	31 05       	cpc	r19, r1
    2736:	dc f4       	brge	.+54     	; 0x276e <HSSD_DisplayNumber+0x66>
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	91 05       	cpc	r25, r1
    2740:	09 f4       	brne	.+2      	; 0x2744 <HSSD_DisplayNumber+0x3c>
    2742:	3b c0       	rjmp	.+118    	; 0x27ba <HSSD_DisplayNumber+0xb2>
    2744:	2b 81       	ldd	r18, Y+3	; 0x03
    2746:	3c 81       	ldd	r19, Y+4	; 0x04
    2748:	22 30       	cpi	r18, 0x02	; 2
    274a:	31 05       	cpc	r19, r1
    274c:	2c f4       	brge	.+10     	; 0x2758 <HSSD_DisplayNumber+0x50>
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	69 f1       	breq	.+90     	; 0x27b0 <HSSD_DisplayNumber+0xa8>
    2756:	5d c0       	rjmp	.+186    	; 0x2812 <HSSD_DisplayNumber+0x10a>
    2758:	2b 81       	ldd	r18, Y+3	; 0x03
    275a:	3c 81       	ldd	r19, Y+4	; 0x04
    275c:	22 30       	cpi	r18, 0x02	; 2
    275e:	31 05       	cpc	r19, r1
    2760:	89 f1       	breq	.+98     	; 0x27c4 <HSSD_DisplayNumber+0xbc>
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	83 30       	cpi	r24, 0x03	; 3
    2768:	91 05       	cpc	r25, r1
    276a:	89 f1       	breq	.+98     	; 0x27ce <HSSD_DisplayNumber+0xc6>
    276c:	52 c0       	rjmp	.+164    	; 0x2812 <HSSD_DisplayNumber+0x10a>
    276e:	2b 81       	ldd	r18, Y+3	; 0x03
    2770:	3c 81       	ldd	r19, Y+4	; 0x04
    2772:	27 30       	cpi	r18, 0x07	; 7
    2774:	31 05       	cpc	r19, r1
    2776:	09 f4       	brne	.+2      	; 0x277a <HSSD_DisplayNumber+0x72>
    2778:	3e c0       	rjmp	.+124    	; 0x27f6 <HSSD_DisplayNumber+0xee>
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	9c 81       	ldd	r25, Y+4	; 0x04
    277e:	88 30       	cpi	r24, 0x08	; 8
    2780:	91 05       	cpc	r25, r1
    2782:	5c f4       	brge	.+22     	; 0x279a <HSSD_DisplayNumber+0x92>
    2784:	2b 81       	ldd	r18, Y+3	; 0x03
    2786:	3c 81       	ldd	r19, Y+4	; 0x04
    2788:	25 30       	cpi	r18, 0x05	; 5
    278a:	31 05       	cpc	r19, r1
    278c:	51 f1       	breq	.+84     	; 0x27e2 <HSSD_DisplayNumber+0xda>
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	86 30       	cpi	r24, 0x06	; 6
    2794:	91 05       	cpc	r25, r1
    2796:	51 f1       	breq	.+84     	; 0x27ec <HSSD_DisplayNumber+0xe4>
    2798:	3c c0       	rjmp	.+120    	; 0x2812 <HSSD_DisplayNumber+0x10a>
    279a:	2b 81       	ldd	r18, Y+3	; 0x03
    279c:	3c 81       	ldd	r19, Y+4	; 0x04
    279e:	28 30       	cpi	r18, 0x08	; 8
    27a0:	31 05       	cpc	r19, r1
    27a2:	71 f1       	breq	.+92     	; 0x2800 <HSSD_DisplayNumber+0xf8>
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	9c 81       	ldd	r25, Y+4	; 0x04
    27a8:	89 30       	cpi	r24, 0x09	; 9
    27aa:	91 05       	cpc	r25, r1
    27ac:	71 f1       	breq	.+92     	; 0x280a <HSSD_DisplayNumber+0x102>
    27ae:	31 c0       	rjmp	.+98     	; 0x2812 <HSSD_DisplayNumber+0x10a>
	{
		case 0: MDIO_voidSetPortValue(A_DIOPort,ZERO);  break;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	6f e3       	ldi	r22, 0x3F	; 63
    27b4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27b8:	2c c0       	rjmp	.+88     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 1: MDIO_voidSetPortValue(A_DIOPort,ONE);   break;
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	66 e0       	ldi	r22, 0x06	; 6
    27be:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27c2:	27 c0       	rjmp	.+78     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 2: MDIO_voidSetPortValue(A_DIOPort,TWO);   break;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	6b e5       	ldi	r22, 0x5B	; 91
    27c8:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27cc:	22 c0       	rjmp	.+68     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 3: MDIO_voidSetPortValue(A_DIOPort,THREE); break;
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	6f e4       	ldi	r22, 0x4F	; 79
    27d2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27d6:	1d c0       	rjmp	.+58     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 4: MDIO_voidSetPortValue(A_DIOPort,FOUR);  break;
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	66 e6       	ldi	r22, 0x66	; 102
    27dc:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27e0:	18 c0       	rjmp	.+48     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 5: MDIO_voidSetPortValue(A_DIOPort,FIVE);  break;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	6d e6       	ldi	r22, 0x6D	; 109
    27e6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27ea:	13 c0       	rjmp	.+38     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 6: MDIO_voidSetPortValue(A_DIOPort,SIX);   break;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	6d e7       	ldi	r22, 0x7D	; 125
    27f0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 7: MDIO_voidSetPortValue(A_DIOPort,SEVEN); break;
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	67 e0       	ldi	r22, 0x07	; 7
    27fa:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    27fe:	09 c0       	rjmp	.+18     	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 8: MDIO_voidSetPortValue(A_DIOPort,EIGHT); break;
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	6f e7       	ldi	r22, 0x7F	; 127
    2804:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <HSSD_DisplayNumber+0x10a>
		case 9: MDIO_voidSetPortValue(A_DIOPort,NINE);  break;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	6f e6       	ldi	r22, 0x6F	; 111
    280e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <MDIO_voidSetPortValue>
		default:break;
	}
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <HSSD_voidDisplayAscending>:
void HSSD_voidDisplayAscending(DIO_PORTS A_DIOPort,u16 A_u16DelayMs)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    2828:	62 97       	sbiw	r28, 0x12	; 18
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	88 8b       	std	Y+16, r24	; 0x10
    2836:	7a 8b       	std	Y+18, r23	; 0x12
    2838:	69 8b       	std	Y+17, r22	; 0x11
	for (u8 i=0 ; i<10 ; i++)
    283a:	1f 86       	std	Y+15, r1	; 0x0f
    283c:	80 c0       	rjmp	.+256    	; 0x293e <HSSD_voidDisplayAscending+0x11e>
	{
		HSSD_DisplayNumber(A_DIOPort , i);
    283e:	88 89       	ldd	r24, Y+16	; 0x10
    2840:	6f 85       	ldd	r22, Y+15	; 0x0f
    2842:	0e 94 84 13 	call	0x2708	; 0x2708 <HSSD_DisplayNumber>
		_delay_ms(A_u16DelayMs);
    2846:	89 89       	ldd	r24, Y+17	; 0x11
    2848:	9a 89       	ldd	r25, Y+18	; 0x12
    284a:	cc 01       	movw	r24, r24
    284c:	a0 e0       	ldi	r26, 0x00	; 0
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8b 87       	std	Y+11, r24	; 0x0b
    285e:	9c 87       	std	Y+12, r25	; 0x0c
    2860:	ad 87       	std	Y+13, r26	; 0x0d
    2862:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2864:	6b 85       	ldd	r22, Y+11	; 0x0b
    2866:	7c 85       	ldd	r23, Y+12	; 0x0c
    2868:	8d 85       	ldd	r24, Y+13	; 0x0d
    286a:	9e 85       	ldd	r25, Y+14	; 0x0e
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	4a ef       	ldi	r20, 0xFA	; 250
    2872:	54 e4       	ldi	r21, 0x44	; 68
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8f 83       	std	Y+7, r24	; 0x07
    287e:	98 87       	std	Y+8, r25	; 0x08
    2880:	a9 87       	std	Y+9, r26	; 0x09
    2882:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2884:	6f 81       	ldd	r22, Y+7	; 0x07
    2886:	78 85       	ldd	r23, Y+8	; 0x08
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	2c f4       	brge	.+10     	; 0x28a6 <HSSD_voidDisplayAscending+0x86>
		__ticks = 1;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9e 83       	std	Y+6, r25	; 0x06
    28a2:	8d 83       	std	Y+5, r24	; 0x05
    28a4:	3f c0       	rjmp	.+126    	; 0x2924 <HSSD_voidDisplayAscending+0x104>
	else if (__tmp > 65535)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	3f ef       	ldi	r19, 0xFF	; 255
    28b2:	4f e7       	ldi	r20, 0x7F	; 127
    28b4:	57 e4       	ldi	r21, 0x47	; 71
    28b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ba:	18 16       	cp	r1, r24
    28bc:	4c f5       	brge	.+82     	; 0x2910 <HSSD_voidDisplayAscending+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28be:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e2       	ldi	r20, 0x20	; 32
    28cc:	51 e4       	ldi	r21, 0x41	; 65
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <HSSD_voidDisplayAscending+0xe6>
    28e8:	88 ec       	ldi	r24, 0xC8	; 200
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	9c 81       	ldd	r25, Y+4	; 0x04
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <HSSD_voidDisplayAscending+0xd4>
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fc:	8d 81       	ldd	r24, Y+5	; 0x05
    28fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	9e 83       	std	Y+6, r25	; 0x06
    2904:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	69 f7       	brne	.-38     	; 0x28e8 <HSSD_voidDisplayAscending+0xc8>
    290e:	14 c0       	rjmp	.+40     	; 0x2938 <HSSD_voidDisplayAscending+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	8d 83       	std	Y+5, r24	; 0x05
    2924:	8d 81       	ldd	r24, Y+5	; 0x05
    2926:	9e 81       	ldd	r25, Y+6	; 0x06
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <HSSD_voidDisplayAscending+0x110>
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
		default:break;
	}
}
void HSSD_voidDisplayAscending(DIO_PORTS A_DIOPort,u16 A_u16DelayMs)
{
	for (u8 i=0 ; i<10 ; i++)
    2938:	8f 85       	ldd	r24, Y+15	; 0x0f
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	8f 87       	std	Y+15, r24	; 0x0f
    293e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2940:	8a 30       	cpi	r24, 0x0A	; 10
    2942:	08 f4       	brcc	.+2      	; 0x2946 <HSSD_voidDisplayAscending+0x126>
    2944:	7c cf       	rjmp	.-264    	; 0x283e <HSSD_voidDisplayAscending+0x1e>
	{
		HSSD_DisplayNumber(A_DIOPort , i);
		_delay_ms(A_u16DelayMs);
	}
}
    2946:	62 96       	adiw	r28, 0x12	; 18
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <HSSD_voidDisplayDescending>:
void HSSD_voidDisplayDescending(DIO_PORTS A_DIOPort,u16 A_u16DelayMs)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	62 97       	sbiw	r28, 0x12	; 18
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	88 8b       	std	Y+16, r24	; 0x10
    296e:	7a 8b       	std	Y+18, r23	; 0x12
    2970:	69 8b       	std	Y+17, r22	; 0x11
	for (s8 i=9 ; i>=0 ; i--)//sign char to be continue count is it unsign it stop after finish one loop
    2972:	89 e0       	ldi	r24, 0x09	; 9
    2974:	8f 87       	std	Y+15, r24	; 0x0f
    2976:	81 c0       	rjmp	.+258    	; 0x2a7a <HSSD_voidDisplayDescending+0x122>
		{
			HSSD_DisplayNumber(A_DIOPort , i);
    2978:	9f 85       	ldd	r25, Y+15	; 0x0f
    297a:	88 89       	ldd	r24, Y+16	; 0x10
    297c:	69 2f       	mov	r22, r25
    297e:	0e 94 84 13 	call	0x2708	; 0x2708 <HSSD_DisplayNumber>
			_delay_ms(A_u16DelayMs);
    2982:	89 89       	ldd	r24, Y+17	; 0x11
    2984:	9a 89       	ldd	r25, Y+18	; 0x12
    2986:	cc 01       	movw	r24, r24
    2988:	a0 e0       	ldi	r26, 0x00	; 0
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8b 87       	std	Y+11, r24	; 0x0b
    299a:	9c 87       	std	Y+12, r25	; 0x0c
    299c:	ad 87       	std	Y+13, r26	; 0x0d
    299e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a ef       	ldi	r20, 0xFA	; 250
    29ae:	54 e4       	ldi	r21, 0x44	; 68
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8f 83       	std	Y+7, r24	; 0x07
    29ba:	98 87       	std	Y+8, r25	; 0x08
    29bc:	a9 87       	std	Y+9, r26	; 0x09
    29be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29c0:	6f 81       	ldd	r22, Y+7	; 0x07
    29c2:	78 85       	ldd	r23, Y+8	; 0x08
    29c4:	89 85       	ldd	r24, Y+9	; 0x09
    29c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <HSSD_voidDisplayDescending+0x8a>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <HSSD_voidDisplayDescending+0x108>
	else if (__tmp > 65535)
    29e2:	6f 81       	ldd	r22, Y+7	; 0x07
    29e4:	78 85       	ldd	r23, Y+8	; 0x08
    29e6:	89 85       	ldd	r24, Y+9	; 0x09
    29e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <HSSD_voidDisplayDescending+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <HSSD_voidDisplayDescending+0xea>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 83       	std	Y+4, r25	; 0x04
    2a2a:	8b 83       	std	Y+3, r24	; 0x03
    2a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <HSSD_voidDisplayDescending+0xd8>
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9e 83       	std	Y+6, r25	; 0x06
    2a40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	9e 81       	ldd	r25, Y+6	; 0x06
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <HSSD_voidDisplayDescending+0xcc>
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <HSSD_voidDisplayDescending+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	9a 83       	std	Y+2, r25	; 0x02
    2a66:	89 83       	std	Y+1, r24	; 0x01
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <HSSD_voidDisplayDescending+0x114>
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(A_u16DelayMs);
	}
}
void HSSD_voidDisplayDescending(DIO_PORTS A_DIOPort,u16 A_u16DelayMs)
{
	for (s8 i=9 ; i>=0 ; i--)//sign char to be continue count is it unsign it stop after finish one loop
    2a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	8f 87       	std	Y+15, r24	; 0x0f
    2a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7c:	88 23       	and	r24, r24
    2a7e:	0c f0       	brlt	.+2      	; 0x2a82 <HSSD_voidDisplayDescending+0x12a>
    2a80:	7b cf       	rjmp	.-266    	; 0x2978 <HSSD_voidDisplayDescending+0x20>
		{
			HSSD_DisplayNumber(A_DIOPort , i);
			_delay_ms(A_u16DelayMs);
		}
}
    2a82:	62 96       	adiw	r28, 0x12	; 18
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <MTIMER0_voidInit>:
#define NULL 0
void (*TIMER0_OVF_CALLBACK)(void)= NULL;//here i make pointer
void (*TIMER0_CTC_CALLBACK)(void)= NULL;//here i make pointer

void MTIMER0_voidInit(void)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
		TCCR0_Reg &=0b11111000;
		TCCR0_Reg |=TIMER_CLK_CONFIGRATION;

	#elif TIMER0_MODE == PHASE_CORRECT_MODE
		//set wave generation mode
		CLR_BIT(TCCR0_Reg,3);
    2a9c:	a3 e5       	ldi	r26, 0x53	; 83
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	87 7f       	andi	r24, 0xF7	; 247
    2aa8:	8c 93       	st	X, r24
		SET_BIT(TCCR0_Reg,6);
    2aaa:	a3 e5       	ldi	r26, 0x53	; 83
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e3 e5       	ldi	r30, 0x53	; 83
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 64       	ori	r24, 0x40	; 64
    2ab6:	8c 93       	st	X, r24
		//disable all interrupts
		CLR_BIT(TIMSK_Reg,1);
    2ab8:	a9 e5       	ldi	r26, 0x59	; 89
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e9 e5       	ldi	r30, 0x59	; 89
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	8d 7f       	andi	r24, 0xFD	; 253
    2ac4:	8c 93       	st	X, r24
		CLR_BIT(TIMSK_Reg,0);
    2ac6:	a9 e5       	ldi	r26, 0x59	; 89
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e9 e5       	ldi	r30, 0x59	; 89
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	8e 7f       	andi	r24, 0xFE	; 254
    2ad2:	8c 93       	st	X, r24
		//set OCR0 value
		OCR0_Reg=OCR0_VALUE;
    2ad4:	ec e5       	ldi	r30, 0x5C	; 92
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	10 82       	st	Z, r1
		//start timer by setting its clock configure OCR0 pin action
		TCCR0_Reg &=0b11001000;
    2ada:	a3 e5       	ldi	r26, 0x53	; 83
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e3 e5       	ldi	r30, 0x53	; 83
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	88 7c       	andi	r24, 0xC8	; 200
    2ae6:	8c 93       	st	X, r24
		TCCR0_Reg |=(TIMER_CLK_CONFIGRATION | (TIMER0_Phase_Correct_OC0_PIN_MODE<<4));
    2ae8:	a3 e5       	ldi	r26, 0x53	; 83
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	e3 e5       	ldi	r30, 0x53	; 83
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	82 62       	ori	r24, 0x22	; 34
    2af4:	8c 93       	st	X, r24
		TCCR0_Reg |=(TIMER_CLK_CONFIGRATION | (TIMER0_PWM_OC0_PIN_MODE<<4));
	#endif



}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <MTIMER1_voidInit>:
void MTIMER1_voidInit(void)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62

	#if TIMER1_MODE == NORMAL_MODE

	#elif TIMER1_MODE == Fast_PWM_ICR1
	//set wave generation mode
	CLR_BIT(TCCR1A_Reg,0);//WGM10
    2b04:	af e4       	ldi	r26, 0x4F	; 79
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	ef e4       	ldi	r30, 0x4F	; 79
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8e 7f       	andi	r24, 0xFE	; 254
    2b10:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Reg,1);//WGM11
    2b12:	af e4       	ldi	r26, 0x4F	; 79
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	ef e4       	ldi	r30, 0x4F	; 79
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	82 60       	ori	r24, 0x02	; 2
    2b1e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Reg,3);//WGM12
    2b20:	ae e4       	ldi	r26, 0x4E	; 78
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	ee e4       	ldi	r30, 0x4E	; 78
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 60       	ori	r24, 0x08	; 8
    2b2c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_Reg,4);//WGM13
    2b2e:	ae e4       	ldi	r26, 0x4E	; 78
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	ee e4       	ldi	r30, 0x4E	; 78
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	80 61       	ori	r24, 0x10	; 16
    2b3a:	8c 93       	st	X, r24
	//select mode form fast PWM
	//non inverting mode for OC1A
	CLR_BIT(TCCR1A_Reg,4);//COM1B0//he doesn't write this
    2b3c:	af e4       	ldi	r26, 0x4F	; 79
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	ef e4       	ldi	r30, 0x4F	; 79
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	8f 7e       	andi	r24, 0xEF	; 239
    2b48:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A_Reg,6);//COM1A0
    2b4a:	af e4       	ldi	r26, 0x4F	; 79
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	ef e4       	ldi	r30, 0x4F	; 79
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 7b       	andi	r24, 0xBF	; 191
    2b56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Reg,5);//COM1B1//he doesn't write this
    2b58:	af e4       	ldi	r26, 0x4F	; 79
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	ef e4       	ldi	r30, 0x4F	; 79
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	80 62       	ori	r24, 0x20	; 32
    2b64:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_Reg,7);//COM1A1
    2b66:	af e4       	ldi	r26, 0x4F	; 79
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
    2b6a:	ef e4       	ldi	r30, 0x4F	; 79
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	80 81       	ld	r24, Z
    2b70:	80 68       	ori	r24, 0x80	; 128
    2b72:	8c 93       	st	X, r24
	//set ICR1 value
	ICR1LH_Reg = ICR1_VALUE;
    2b74:	e6 e4       	ldi	r30, 0x46	; 70
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	8f e1       	ldi	r24, 0x1F	; 31
    2b7a:	9e e4       	ldi	r25, 0x4E	; 78
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
	//set OCR1A value
	OCR1ALH_Reg = OCR1A_VALUE;
    2b80:	ea e4       	ldi	r30, 0x4A	; 74
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	8c ed       	ldi	r24, 0xDC	; 220
    2b86:	95 e0       	ldi	r25, 0x05	; 5
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	80 83       	st	Z, r24
	//start timer by setting its clock
	TCCR1B_Reg &=0b11111000;
    2b8c:	ae e4       	ldi	r26, 0x4E	; 78
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	ee e4       	ldi	r30, 0x4E	; 78
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	88 7f       	andi	r24, 0xF8	; 248
    2b98:	8c 93       	st	X, r24
	TCCR1B_Reg |=TIMER_CLK_CONFIGRATION;
    2b9a:	ae e4       	ldi	r26, 0x4E	; 78
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	ee e4       	ldi	r30, 0x4E	; 78
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	82 60       	ori	r24, 0x02	; 2
    2ba6:	8c 93       	st	X, r24

	#endif

}
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <MTIMER1_voidSetOCR1AValue>:

void MTIMER1_voidSetOCR1AValue (u16 A_u16Value)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <MTIMER1_voidSetOCR1AValue+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
	OCR1ALH_Reg = A_u16Value;
    2bbc:	ea e4       	ldi	r30, 0x4A	; 74
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	08 95       	ret

00002bd2 <MTIMER0_voidSetPreLoadvalue>:
void MTIMER0_voidSetPreLoadvalue (u8 A_u8NoOfTicks)
{
    2bd2:	df 93       	push	r29
    2bd4:	cf 93       	push	r28
    2bd6:	0f 92       	push	r0
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_Reg=A_u8NoOfTicks;
    2bde:	e2 e5       	ldi	r30, 0x52	; 82
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	80 83       	st	Z, r24
}
    2be6:	0f 90       	pop	r0
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <MTIMER0_void_SetOCR0Value>:

void MTIMER0_void_SetOCR0Value(u8 A_u8OCR0Value)
{
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	0f 92       	push	r0
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	89 83       	std	Y+1, r24	; 0x01
	OCR0_Reg = A_u8OCR0Value ;
    2bfa:	ec e5       	ldi	r30, 0x5C	; 92
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	80 83       	st	Z, r24
}
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer (void)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
	TCCR0_Reg &=0b11111000;
    2c12:	a3 e5       	ldi	r26, 0x53	; 83
    2c14:	b0 e0       	ldi	r27, 0x00	; 0
    2c16:	e3 e5       	ldi	r30, 0x53	; 83
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	88 7f       	andi	r24, 0xF8	; 248
    2c1e:	8c 93       	st	X, r24
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <MTIMER0_voidOVFSetCallBack>:

void MTIMER0_voidOVFSetCallBack(void (*A_PtrToFunc)(void))
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <MTIMER0_voidOVFSetCallBack+0x6>
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
	if(A_PtrToFunc!=NULL)
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	31 f0       	breq	.+12     	; 0x2c48 <MTIMER0_voidOVFSetCallBack+0x22>
	{
		TIMER0_OVF_CALLBACK = A_PtrToFunc;
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	90 93 7f 02 	sts	0x027F, r25
    2c44:	80 93 7e 02 	sts	0x027E, r24
	}
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <MTIMER0_voidCTCSetCallBack>:
void MTIMER0_voidCTCSetCallBack(void (*A_PtrToFunc)(void))
{
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <MTIMER0_voidCTCSetCallBack+0x6>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
	if(A_PtrToFunc!=NULL)
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	31 f0       	breq	.+12     	; 0x2c74 <MTIMER0_voidCTCSetCallBack+0x22>
	{
		TIMER0_CTC_CALLBACK = A_PtrToFunc;
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	90 93 81 02 	sts	0x0281, r25
    2c70:	80 93 80 02 	sts	0x0280, r24
	}
}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <__vector_11>:

void _vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_CALLBACK!=NULL)
    2c86:	80 91 7e 02 	lds	r24, 0x027E
    2c8a:	90 91 7f 02 	lds	r25, 0x027F
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	29 f0       	breq	.+10     	; 0x2c9c <__vector_11+0x1e>
	{
		TIMER0_OVF_CALLBACK();
    2c92:	e0 91 7e 02 	lds	r30, 0x027E
    2c96:	f0 91 7f 02 	lds	r31, 0x027F
    2c9a:	09 95       	icall
	}
}
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <__vector_10>:

void _vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_CALLBACK!=NULL)
    2caa:	80 91 80 02 	lds	r24, 0x0280
    2cae:	90 91 81 02 	lds	r25, 0x0281
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <__vector_10+0x1e>
	{
		TIMER0_CTC_CALLBACK();
    2cb6:	e0 91 80 02 	lds	r30, 0x0280
    2cba:	f0 91 81 02 	lds	r31, 0x0281
    2cbe:	09 95       	icall
	}
}
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <MUART_voidInit>:
#define F_cpu 8000000ul
#define NULL 0
static void (*FuncPtr[3]) (void) ={NULL,NULL,NULL};

void MUART_voidInit(void)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	00 d0       	rcall	.+0      	; 0x2ccc <MUART_voidInit+0x6>
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16BaudRateValue  =BAUD_RATE_EQUATION;
    2cd0:	83 e3       	ldi	r24, 0x33	; 51
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
	//set boudrate
	UBRRL_Reg =(u8)local_u16BaudRateValue;
    2cd8:	e9 e2       	ldi	r30, 0x29	; 41
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	80 83       	st	Z, r24
	UBRRH_Reg =(u8)(local_u16BaudRateValue >> 8);
    2ce0:	e0 e4       	ldi	r30, 0x40	; 64
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	89 2f       	mov	r24, r25
    2cea:	99 27       	eor	r25, r25
    2cec:	80 83       	st	Z, r24
	//character size 8 bit
	CLR_BIT(UCSRB_Reg,2);
    2cee:	aa e2       	ldi	r26, 0x2A	; 42
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ea e2       	ldi	r30, 0x2A	; 42
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	8b 7f       	andi	r24, 0xFB	; 251
    2cfa:	8c 93       	st	X, r24
	//mode asynchronous operation
	//parity disabled
	//1 stop bit
	UCSRC_Reg=CONC_BIT(1,0,0,0,0,1,1,0);
    2cfc:	e0 e4       	ldi	r30, 0x40	; 64
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	86 e8       	ldi	r24, 0x86	; 134
    2d02:	80 83       	st	Z, r24
	//enable receiver
	SET_BIT(UCSRB_Reg,4);
    2d04:	aa e2       	ldi	r26, 0x2A	; 42
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	ea e2       	ldi	r30, 0x2A	; 42
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	80 61       	ori	r24, 0x10	; 16
    2d10:	8c 93       	st	X, r24
	//enable transmitter
	SET_BIT(UCSRB_Reg,3);
    2d12:	aa e2       	ldi	r26, 0x2A	; 42
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	ea e2       	ldi	r30, 0x2A	; 42
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	88 60       	ori	r24, 0x08	; 8
    2d1e:	8c 93       	st	X, r24
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <MUART_voidSendByteSyncBlocking>:
void MUART_voidSendByteSyncBlocking(u8 A_u8DataByte)
{
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
	//wait until UDRE_REG is empty
	while(GET_BIT(UCSRA_Reg,5)==0);
    2d36:	eb e2       	ldi	r30, 0x2B	; 43
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	82 95       	swap	r24
    2d3e:	86 95       	lsr	r24
    2d40:	87 70       	andi	r24, 0x07	; 7
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	81 70       	andi	r24, 0x01	; 1
    2d48:	90 70       	andi	r25, 0x00	; 0
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	a1 f3       	breq	.-24     	; 0x2d36 <MUART_voidSendByteSyncBlocking+0xc>
	//set Data into Tx register and start Transmission
	UDR_Reg= A_u8DataByte;
    2d4e:	ec e2       	ldi	r30, 0x2C	; 44
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	80 83       	st	Z, r24
	//wait until UDRE_REG is empty
	while(GET_BIT(UCSRA_Reg,5)==0);
    2d56:	eb e2       	ldi	r30, 0x2B	; 43
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	82 95       	swap	r24
    2d5e:	86 95       	lsr	r24
    2d60:	87 70       	andi	r24, 0x07	; 7
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	81 70       	andi	r24, 0x01	; 1
    2d68:	90 70       	andi	r25, 0x00	; 0
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	a1 f3       	breq	.-24     	; 0x2d56 <MUART_voidSendByteSyncBlocking+0x2c>
	//CLEAR transmit interrupt flag
	SET_BIT(UCSRA_Reg,6);
    2d6e:	ab e2       	ldi	r26, 0x2B	; 43
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	eb e2       	ldi	r30, 0x2B	; 43
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	80 64       	ori	r24, 0x40	; 64
    2d7a:	8c 93       	st	X, r24
}
    2d7c:	0f 90       	pop	r0
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <MUART_voidSendByteSyncNonBlocking>:
void MUART_voidSendByteSyncNonBlocking(u8 A_u8DataByte)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	00 d0       	rcall	.+0      	; 0x2d8a <MUART_voidSendByteSyncNonBlocking+0x6>
    2d8a:	0f 92       	push	r0
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	8b 83       	std	Y+3, r24	; 0x03
	u32 local_u32TimeOut =0;
    2d92:	1a 82       	std	Y+2, r1	; 0x02
    2d94:	19 82       	std	Y+1, r1	; 0x01
    2d96:	0b c0       	rjmp	.+22     	; 0x2dae <MUART_voidSendByteSyncNonBlocking+0x2a>
	//wait until UDRE_REG is empty or time out
	while(GET_BIT(UCSRA_Reg,5)==0)
	{
		local_u32TimeOut++;
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	9a 83       	std	Y+2, r25	; 0x02
    2da0:	89 83       	std	Y+1, r24	; 0x01
		if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	23 e1       	ldi	r18, 0x13	; 19
    2da8:	88 38       	cpi	r24, 0x88	; 136
    2daa:	92 07       	cpc	r25, r18
    2dac:	61 f0       	breq	.+24     	; 0x2dc6 <MUART_voidSendByteSyncNonBlocking+0x42>
}
void MUART_voidSendByteSyncNonBlocking(u8 A_u8DataByte)
{
	u32 local_u32TimeOut =0;
	//wait until UDRE_REG is empty or time out
	while(GET_BIT(UCSRA_Reg,5)==0)
    2dae:	eb e2       	ldi	r30, 0x2B	; 43
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	82 95       	swap	r24
    2db6:	86 95       	lsr	r24
    2db8:	87 70       	andi	r24, 0x07	; 7
    2dba:	88 2f       	mov	r24, r24
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	81 70       	andi	r24, 0x01	; 1
    2dc0:	90 70       	andi	r25, 0x00	; 0
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	49 f3       	breq	.-46     	; 0x2d98 <MUART_voidSendByteSyncNonBlocking+0x14>
		if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if (local_u32TimeOut!=NON_BLOCKING_TIME_OUT)
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	23 e1       	ldi	r18, 0x13	; 19
    2dcc:	88 38       	cpi	r24, 0x88	; 136
    2dce:	92 07       	cpc	r25, r18
    2dd0:	29 f1       	breq	.+74     	; 0x2e1c <MUART_voidSendByteSyncNonBlocking+0x98>
	{
		local_u32TimeOut=0;
    2dd2:	1a 82       	std	Y+2, r1	; 0x02
    2dd4:	19 82       	std	Y+1, r1	; 0x01
		//set Data into Tx register and start Transmission
		UDR_Reg= A_u8DataByte;
    2dd6:	ec e2       	ldi	r30, 0x2C	; 44
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	80 83       	st	Z, r24
    2dde:	0b c0       	rjmp	.+22     	; 0x2df6 <MUART_voidSendByteSyncNonBlocking+0x72>
		//wait until UDRE_REG is empty or time out
		while(GET_BIT(UCSRA_Reg,5)==0)
		{
			local_u32TimeOut++;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	9a 81       	ldd	r25, Y+2	; 0x02
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
			if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	23 e1       	ldi	r18, 0x13	; 19
    2df0:	88 38       	cpi	r24, 0x88	; 136
    2df2:	92 07       	cpc	r25, r18
    2df4:	61 f0       	breq	.+24     	; 0x2e0e <MUART_voidSendByteSyncNonBlocking+0x8a>
	{
		local_u32TimeOut=0;
		//set Data into Tx register and start Transmission
		UDR_Reg= A_u8DataByte;
		//wait until UDRE_REG is empty or time out
		while(GET_BIT(UCSRA_Reg,5)==0)
    2df6:	eb e2       	ldi	r30, 0x2B	; 43
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	82 95       	swap	r24
    2dfe:	86 95       	lsr	r24
    2e00:	87 70       	andi	r24, 0x07	; 7
    2e02:	88 2f       	mov	r24, r24
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	81 70       	andi	r24, 0x01	; 1
    2e08:	90 70       	andi	r25, 0x00	; 0
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	49 f3       	breq	.-46     	; 0x2de0 <MUART_voidSendByteSyncNonBlocking+0x5c>
			{
				break;
			}
		}
		//CLEAR transmit interrupt flag
		SET_BIT(UCSRA_Reg,6);
    2e0e:	ab e2       	ldi	r26, 0x2B	; 43
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	eb e2       	ldi	r30, 0x2B	; 43
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	80 64       	ori	r24, 0x40	; 64
    2e1a:	8c 93       	st	X, r24
	}
}
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <MUART_voidSendStringSyncNonBlocking>:

void MUART_voidSendStringSyncNonBlocking(u8 *A_u8String)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <MUART_voidSendStringSyncNonBlocking+0x6>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	0b c0       	rjmp	.+22     	; 0x2e4e <MUART_voidSendStringSyncNonBlocking+0x26>
	while(*A_u8String>0)
	{
		MUART_voidSendByteSyncNonBlocking(*A_u8String++);
    2e38:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3c:	20 81       	ld	r18, Z
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	82 2f       	mov	r24, r18
    2e4a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <MUART_voidSendByteSyncNonBlocking>
	}
}

void MUART_voidSendStringSyncNonBlocking(u8 *A_u8String)
{
	while(*A_u8String>0)
    2e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e50:	fa 81       	ldd	r31, Y+2	; 0x02
    2e52:	80 81       	ld	r24, Z
    2e54:	88 23       	and	r24, r24
    2e56:	81 f7       	brne	.-32     	; 0x2e38 <MUART_voidSendStringSyncNonBlocking+0x10>
	{
		MUART_voidSendByteSyncNonBlocking(*A_u8String++);
	}
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <MUART_voidSendByteASync>:

void MUART_voidSendByteASync(u8 A_u8DataByte)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	0f 92       	push	r0
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	if (GET_BIT(UCSRA_Reg,5)==1)
    2e6e:	eb e2       	ldi	r30, 0x2B	; 43
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	82 95       	swap	r24
    2e76:	86 95       	lsr	r24
    2e78:	87 70       	andi	r24, 0x07	; 7
    2e7a:	88 2f       	mov	r24, r24
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	81 70       	andi	r24, 0x01	; 1
    2e80:	90 70       	andi	r25, 0x00	; 0
    2e82:	88 23       	and	r24, r24
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <MUART_voidSendByteASync+0x2c>
	{
		UDR_Reg=A_u8DataByte;
    2e86:	ec e2       	ldi	r30, 0x2C	; 44
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	80 83       	st	Z, r24
	}
}
    2e8e:	0f 90       	pop	r0
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <MUART_u8ReadByteSyncBlocking>:

u8 MUART_u8ReadByteSyncBlocking(void)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	//wait for Rx Flag
	while(GET_BIT(UCSRA_Reg,7)==0);
    2e9e:	eb e2       	ldi	r30, 0x2B	; 43
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 23       	and	r24, r24
    2ea6:	dc f7       	brge	.-10     	; 0x2e9e <MUART_u8ReadByteSyncBlocking+0x8>
	return UDR_Reg;
    2ea8:	ec e2       	ldi	r30, 0x2C	; 44
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
}
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <MUART_u8ReadByteASync>:

u8 MUART_u8ReadByteASync(void)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
	return UDR_Reg;
    2ebc:	ec e2       	ldi	r30, 0x2C	; 44
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
}
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <MUART_u8ReadByteSyncNonBlocking>:

u8 MUART_u8ReadByteSyncNonBlocking(void)
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <MUART_u8ReadByteSyncNonBlocking+0x6>
    2ece:	0f 92       	push	r0
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8value = NO_VALUE_RETURNED;
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
    2ed6:	8b 83       	std	Y+3, r24	; 0x03
	//wait for Rx Flag
	u32 local_u32TimeOut =0;
    2ed8:	1a 82       	std	Y+2, r1	; 0x02
    2eda:	19 82       	std	Y+1, r1	; 0x01
    2edc:	0b c0       	rjmp	.+22     	; 0x2ef4 <MUART_u8ReadByteSyncNonBlocking+0x2c>
	//wait until Rx flag is up
	while(GET_BIT(UCSRA_Reg,7)==0)
	{
		local_u32TimeOut++;
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	9a 83       	std	Y+2, r25	; 0x02
    2ee6:	89 83       	std	Y+1, r24	; 0x01
		if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	23 e1       	ldi	r18, 0x13	; 19
    2eee:	88 38       	cpi	r24, 0x88	; 136
    2ef0:	92 07       	cpc	r25, r18
    2ef2:	29 f0       	breq	.+10     	; 0x2efe <MUART_u8ReadByteSyncNonBlocking+0x36>
{
	u8 local_u8value = NO_VALUE_RETURNED;
	//wait for Rx Flag
	u32 local_u32TimeOut =0;
	//wait until Rx flag is up
	while(GET_BIT(UCSRA_Reg,7)==0)
    2ef4:	eb e2       	ldi	r30, 0x2B	; 43
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	88 23       	and	r24, r24
    2efc:	84 f7       	brge	.-32     	; 0x2ede <MUART_u8ReadByteSyncNonBlocking+0x16>
		if (local_u32TimeOut==NON_BLOCKING_TIME_OUT)
		{
			break;
		}
	}
	if(local_u32TimeOut!= NON_BLOCKING_TIME_OUT)
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	9a 81       	ldd	r25, Y+2	; 0x02
    2f02:	23 e1       	ldi	r18, 0x13	; 19
    2f04:	88 38       	cpi	r24, 0x88	; 136
    2f06:	92 07       	cpc	r25, r18
    2f08:	21 f0       	breq	.+8      	; 0x2f12 <MUART_u8ReadByteSyncNonBlocking+0x4a>
	{local_u8value=UDR_Reg;}
    2f0a:	ec e2       	ldi	r30, 0x2C	; 44
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8b 83       	std	Y+3, r24	; 0x03
	return UDR_Reg;
    2f12:	ec e2       	ldi	r30, 0x2C	; 44
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	08 95       	ret

00002f24 <MUART_voidSetCallBack>:

void MUART_voidSetCallBack(UART_INTERRUPTS A_InterruptSource , void(*A_PtoFunc)(void))
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <MUART_voidSetCallBack+0x6>
    2f2a:	0f 92       	push	r0
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	7b 83       	std	Y+3, r23	; 0x03
    2f34:	6a 83       	std	Y+2, r22	; 0x02
	if( (A_InterruptSource <=UART_TX_INTERRUPTS) && (A_PtoFunc != NULL) )
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	83 30       	cpi	r24, 0x03	; 3
    2f3a:	80 f4       	brcc	.+32     	; 0x2f5c <MUART_voidSetCallBack+0x38>
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	61 f0       	breq	.+24     	; 0x2f5c <MUART_voidSetCallBack+0x38>
	{
		FuncPtr[A_InterruptSource] = A_PtoFunc;
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	88 2f       	mov	r24, r24
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	fc 01       	movw	r30, r24
    2f50:	ee 57       	subi	r30, 0x7E	; 126
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	8a 81       	ldd	r24, Y+2	; 0x02
    2f56:	9b 81       	ldd	r25, Y+3	; 0x03
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
	}
}
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    2f68:	1f 92       	push	r1
    2f6a:	0f 92       	push	r0
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	0f 92       	push	r0
    2f70:	11 24       	eor	r1, r1
    2f72:	2f 93       	push	r18
    2f74:	3f 93       	push	r19
    2f76:	4f 93       	push	r20
    2f78:	5f 93       	push	r21
    2f7a:	6f 93       	push	r22
    2f7c:	7f 93       	push	r23
    2f7e:	8f 93       	push	r24
    2f80:	9f 93       	push	r25
    2f82:	af 93       	push	r26
    2f84:	bf 93       	push	r27
    2f86:	ef 93       	push	r30
    2f88:	ff 93       	push	r31
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_RX_INTERRUPTS] != NULL)
    2f92:	80 91 82 02 	lds	r24, 0x0282
    2f96:	90 91 83 02 	lds	r25, 0x0283
    2f9a:	00 97       	sbiw	r24, 0x00	; 0
    2f9c:	29 f0       	breq	.+10     	; 0x2fa8 <__vector_13+0x40>
	{
		FuncPtr[UART_RX_INTERRUPTS]();
    2f9e:	e0 91 82 02 	lds	r30, 0x0282
    2fa2:	f0 91 83 02 	lds	r31, 0x0283
    2fa6:	09 95       	icall
	}
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	ff 91       	pop	r31
    2fae:	ef 91       	pop	r30
    2fb0:	bf 91       	pop	r27
    2fb2:	af 91       	pop	r26
    2fb4:	9f 91       	pop	r25
    2fb6:	8f 91       	pop	r24
    2fb8:	7f 91       	pop	r23
    2fba:	6f 91       	pop	r22
    2fbc:	5f 91       	pop	r21
    2fbe:	4f 91       	pop	r20
    2fc0:	3f 91       	pop	r19
    2fc2:	2f 91       	pop	r18
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
    2fce:	1f 92       	push	r1
    2fd0:	0f 92       	push	r0
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	0f 92       	push	r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	2f 93       	push	r18
    2fda:	3f 93       	push	r19
    2fdc:	4f 93       	push	r20
    2fde:	5f 93       	push	r21
    2fe0:	6f 93       	push	r22
    2fe2:	7f 93       	push	r23
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	af 93       	push	r26
    2fea:	bf 93       	push	r27
    2fec:	ef 93       	push	r30
    2fee:	ff 93       	push	r31
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_UDRE_INTERRUPTS] != NULL)
    2ff8:	80 91 84 02 	lds	r24, 0x0284
    2ffc:	90 91 85 02 	lds	r25, 0x0285
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	29 f0       	breq	.+10     	; 0x300e <__vector_14+0x40>
	{
		FuncPtr[UART_UDRE_INTERRUPTS]();
    3004:	e0 91 84 02 	lds	r30, 0x0284
    3008:	f0 91 85 02 	lds	r31, 0x0285
    300c:	09 95       	icall
	}
}
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	ff 91       	pop	r31
    3014:	ef 91       	pop	r30
    3016:	bf 91       	pop	r27
    3018:	af 91       	pop	r26
    301a:	9f 91       	pop	r25
    301c:	8f 91       	pop	r24
    301e:	7f 91       	pop	r23
    3020:	6f 91       	pop	r22
    3022:	5f 91       	pop	r21
    3024:	4f 91       	pop	r20
    3026:	3f 91       	pop	r19
    3028:	2f 91       	pop	r18
    302a:	0f 90       	pop	r0
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	0f 90       	pop	r0
    3030:	1f 90       	pop	r1
    3032:	18 95       	reti

00003034 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    3034:	1f 92       	push	r1
    3036:	0f 92       	push	r0
    3038:	0f b6       	in	r0, 0x3f	; 63
    303a:	0f 92       	push	r0
    303c:	11 24       	eor	r1, r1
    303e:	2f 93       	push	r18
    3040:	3f 93       	push	r19
    3042:	4f 93       	push	r20
    3044:	5f 93       	push	r21
    3046:	6f 93       	push	r22
    3048:	7f 93       	push	r23
    304a:	8f 93       	push	r24
    304c:	9f 93       	push	r25
    304e:	af 93       	push	r26
    3050:	bf 93       	push	r27
    3052:	ef 93       	push	r30
    3054:	ff 93       	push	r31
    3056:	df 93       	push	r29
    3058:	cf 93       	push	r28
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
	if(FuncPtr[UART_TX_INTERRUPTS] != NULL)
    305e:	80 91 86 02 	lds	r24, 0x0286
    3062:	90 91 87 02 	lds	r25, 0x0287
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	29 f0       	breq	.+10     	; 0x3074 <__vector_15+0x40>
	{
		FuncPtr[UART_TX_INTERRUPTS]();
    306a:	e0 91 86 02 	lds	r30, 0x0286
    306e:	f0 91 87 02 	lds	r31, 0x0287
    3072:	09 95       	icall
	}
}
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	ff 91       	pop	r31
    307a:	ef 91       	pop	r30
    307c:	bf 91       	pop	r27
    307e:	af 91       	pop	r26
    3080:	9f 91       	pop	r25
    3082:	8f 91       	pop	r24
    3084:	7f 91       	pop	r23
    3086:	6f 91       	pop	r22
    3088:	5f 91       	pop	r21
    308a:	4f 91       	pop	r20
    308c:	3f 91       	pop	r19
    308e:	2f 91       	pop	r18
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	1f 90       	pop	r1
    3098:	18 95       	reti

0000309a <MWDT_voidEnable>:
#include "../include/MCAL/WDT/WDT_private.h"
#include "../include/MCAL/WDT/WDT_cfg.h"


void MWDT_voidEnable(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	WDTCR_Reg = 0b00001111;
    30a2:	e1 e4       	ldi	r30, 0x41	; 65
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	8f e0       	ldi	r24, 0x0F	; 15
    30a8:	80 83       	st	Z, r24
}
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <MWDT_voidDisable>:
void MWDT_voidDisable(void)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	cd b7       	in	r28, 0x3d	; 61
    30b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(WDTCR_Reg,3);
    30b8:	a1 e4       	ldi	r26, 0x41	; 65
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	e1 e4       	ldi	r30, 0x41	; 65
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	87 7f       	andi	r24, 0xF7	; 247
    30c4:	8c 93       	st	X, r24
	SET_BIT(WDTCR_Reg,4);
    30c6:	a1 e4       	ldi	r26, 0x41	; 65
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e1 e4       	ldi	r30, 0x41	; 65
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	80 61       	ori	r24, 0x10	; 16
    30d2:	8c 93       	st	X, r24
	WDTCR_Reg = 0b00000000;
    30d4:	e1 e4       	ldi	r30, 0x41	; 65
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	10 82       	st	Z, r1
}
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <main>:
#include "../include/MCAL/WDT/WDT_interface.h"
#include "../include/MCAL/UART/UART_interface.h"
#define F_cpu 8000000ul
void HSERVO_voidSetAngle (u8 A_u8Angle);
int main(void)
{
    30e0:	df 93       	push	r29
    30e2:	cf 93       	push	r28
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	c2 54       	subi	r28, 0x42	; 66
    30ea:	d0 40       	sbci	r29, 0x00	; 0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	f8 94       	cli
    30f0:	de bf       	out	0x3e, r29	; 62
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	cd bf       	out	0x3d, r28	; 61
	// PIN A0  INPUT-FLOATING for ADC
	// set PD5 to Output-Low to setting pwm
	MDIO_voidInit();
    30f6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <MDIO_voidInit>
	MTIMER1_voidInit();
    30fa:	0e 94 7e 15 	call	0x2afc	; 0x2afc <MTIMER1_voidInit>
	MADC_voidInit();
    30fe:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <MADC_voidInit>
	u16 local_u16DigitalValue_0 =0,local_u16AnalogSignal_0;
    3102:	1a aa       	std	Y+50, r1	; 0x32
    3104:	19 aa       	std	Y+49, r1	; 0x31
	u16 local_u16DigitalValue_1 =0,local_u16AnalogSignal_1;
    3106:	1e a6       	std	Y+46, r1	; 0x2e
    3108:	1d a6       	std	Y+45, r1	; 0x2d
	u16 local_u16DigitalValue_2 =0,local_u16AnalogSignal_2;
    310a:	1a a6       	std	Y+42, r1	; 0x2a
    310c:	19 a6       	std	Y+41, r1	; 0x29
	u16 local_u16DigitalValue_3 =0,local_u16AnalogSignal_3;
    310e:	1e a2       	std	Y+38, r1	; 0x26
    3110:	1d a2       	std	Y+37, r1	; 0x25
	u16 local_u16DigitalValue_4 =0,local_u16AnalogSignal_4;
    3112:	1a a2       	std	Y+34, r1	; 0x22
    3114:	19 a2       	std	Y+33, r1	; 0x21
	u16 local_u16DigitalValue_5 =0,local_u16AnalogSignal_5;
    3116:	1e 8e       	std	Y+30, r1	; 0x1e
    3118:	1d 8e       	std	Y+29, r1	; 0x1d
	u16 local_u16DigitalValue_6 =0,local_u16AnalogSignal_6;
    311a:	1a 8e       	std	Y+26, r1	; 0x1a
    311c:	19 8e       	std	Y+25, r1	; 0x19
	u16 local_u16DigitalValue_7 =0,local_u16AnalogSignal_7;
    311e:	1e 8a       	std	Y+22, r1	; 0x16
    3120:	1d 8a       	std	Y+21, r1	; 0x15

	u8 A_u8Angle =90;
    3122:	8a e5       	ldi	r24, 0x5A	; 90
    3124:	8a 8b       	std	Y+18, r24	; 0x12

	u16 A_u16_array_AnalogSignal[8]={0};
    3126:	80 e1       	ldi	r24, 0x10	; 16
    3128:	fe 01       	movw	r30, r28
    312a:	f3 96       	adiw	r30, 0x33	; 51
    312c:	df 01       	movw	r26, r30
    312e:	48 2f       	mov	r20, r24
    3130:	1d 92       	st	X+, r1
    3132:	4a 95       	dec	r20
    3134:	e9 f7       	brne	.-6      	; 0x3130 <main+0x50>

	MUART_voidInit();
    3136:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <MUART_voidInit>
	u8 local_u8PressedKeyValue =0;
    313a:	19 8a       	std	Y+17, r1	; 0x11
	MUART_voidSendStringSyncNonBlocking("HELLO, this is automatic tracking system \r\n");
    313c:	80 e6       	ldi	r24, 0x60	; 96
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
	MUART_voidSendStringSyncNonBlocking("for solar panal by using small LDR \r\n");
    3144:	8c e8       	ldi	r24, 0x8C	; 140
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
	while(1)
	{
		for (int var = 0; var < 30; ++var)
    314c:	18 8a       	std	Y+16, r1	; 0x10
    314e:	1f 86       	std	Y+15, r1	; 0x0f
    3150:	45 c0       	rjmp	.+138    	; 0x31dc <main+0xfc>
		{
			u16 sum=0;
    3152:	1e 86       	std	Y+14, r1	; 0x0e
    3154:	1d 86       	std	Y+13, r1	; 0x0d
			local_u16DigitalValue_0 =MADC_u16GetDigitalValue(ADC_0);
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	0e 94 aa 06 	call	0xd54	; 0xd54 <MADC_u16GetDigitalValue>
    315c:	9a ab       	std	Y+50, r25	; 0x32
    315e:	89 ab       	std	Y+49, r24	; 0x31
			local_u16AnalogSignal_0 =(local_u16DigitalValue_0 * 5000)/1024;
    3160:	29 a9       	ldd	r18, Y+49	; 0x31
    3162:	3a a9       	ldd	r19, Y+50	; 0x32
    3164:	88 e8       	ldi	r24, 0x88	; 136
    3166:	93 e1       	ldi	r25, 0x13	; 19
    3168:	dc 01       	movw	r26, r24
    316a:	2a 9f       	mul	r18, r26
    316c:	c0 01       	movw	r24, r0
    316e:	2b 9f       	mul	r18, r27
    3170:	90 0d       	add	r25, r0
    3172:	3a 9f       	mul	r19, r26
    3174:	90 0d       	add	r25, r0
    3176:	11 24       	eor	r1, r1
    3178:	89 2f       	mov	r24, r25
    317a:	99 27       	eor	r25, r25
    317c:	86 95       	lsr	r24
    317e:	86 95       	lsr	r24
    3180:	98 ab       	std	Y+48, r25	; 0x30
    3182:	8f a7       	std	Y+47, r24	; 0x2f
			sum+=local_u16AnalogSignal_0;
    3184:	2d 85       	ldd	r18, Y+13	; 0x0d
    3186:	3e 85       	ldd	r19, Y+14	; 0x0e
    3188:	8f a5       	ldd	r24, Y+47	; 0x2f
    318a:	98 a9       	ldd	r25, Y+48	; 0x30
    318c:	82 0f       	add	r24, r18
    318e:	93 1f       	adc	r25, r19
    3190:	9e 87       	std	Y+14, r25	; 0x0e
    3192:	8d 87       	std	Y+13, r24	; 0x0d
			if(var==29)
    3194:	8f 85       	ldd	r24, Y+15	; 0x0f
    3196:	98 89       	ldd	r25, Y+16	; 0x10
    3198:	8d 31       	cpi	r24, 0x1D	; 29
    319a:	91 05       	cpc	r25, r1
    319c:	d1 f4       	brne	.+52     	; 0x31d2 <main+0xf2>
			{
				sum+=local_u16AnalogSignal_0;
    319e:	2d 85       	ldd	r18, Y+13	; 0x0d
    31a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    31a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a4:	98 a9       	ldd	r25, Y+48	; 0x30
    31a6:	82 0f       	add	r24, r18
    31a8:	93 1f       	adc	r25, r19
    31aa:	9e 87       	std	Y+14, r25	; 0x0e
    31ac:	8d 87       	std	Y+13, r24	; 0x0d
				sum=sum/30;
    31ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b2:	2e e1       	ldi	r18, 0x1E	; 30
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	b9 01       	movw	r22, r18
    31b8:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    31bc:	cb 01       	movw	r24, r22
    31be:	9e 87       	std	Y+14, r25	; 0x0e
    31c0:	8d 87       	std	Y+13, r24	; 0x0d
				local_u16AnalogSignal_0=sum;
    31c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c6:	98 ab       	std	Y+48, r25	; 0x30
    31c8:	8f a7       	std	Y+47, r24	; 0x2f
				A_u16_array_AnalogSignal[0]=sum;
    31ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    31cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ce:	9c ab       	std	Y+52, r25	; 0x34
    31d0:	8b ab       	std	Y+51, r24	; 0x33
	u8 local_u8PressedKeyValue =0;
	MUART_voidSendStringSyncNonBlocking("HELLO, this is automatic tracking system \r\n");
	MUART_voidSendStringSyncNonBlocking("for solar panal by using small LDR \r\n");
	while(1)
	{
		for (int var = 0; var < 30; ++var)
    31d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31d4:	98 89       	ldd	r25, Y+16	; 0x10
    31d6:	01 96       	adiw	r24, 0x01	; 1
    31d8:	98 8b       	std	Y+16, r25	; 0x10
    31da:	8f 87       	std	Y+15, r24	; 0x0f
    31dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    31de:	98 89       	ldd	r25, Y+16	; 0x10
    31e0:	8e 31       	cpi	r24, 0x1E	; 30
    31e2:	91 05       	cpc	r25, r1
    31e4:	0c f4       	brge	.+2      	; 0x31e8 <main+0x108>
    31e6:	b5 cf       	rjmp	.-150    	; 0x3152 <main+0x72>

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    31e8:	1c 86       	std	Y+12, r1	; 0x0c
    31ea:	1b 86       	std	Y+11, r1	; 0x0b
    31ec:	45 c0       	rjmp	.+138    	; 0x3278 <main+0x198>
		{
			u16 sum=0;
    31ee:	1a 86       	std	Y+10, r1	; 0x0a
    31f0:	19 86       	std	Y+9, r1	; 0x09
			local_u16DigitalValue_2 =MADC_u16GetDigitalValue(ADC_2);
    31f2:	82 e0       	ldi	r24, 0x02	; 2
    31f4:	0e 94 aa 06 	call	0xd54	; 0xd54 <MADC_u16GetDigitalValue>
    31f8:	9a a7       	std	Y+42, r25	; 0x2a
    31fa:	89 a7       	std	Y+41, r24	; 0x29
			local_u16AnalogSignal_2 =(local_u16DigitalValue_2 * 5000)/1024;
    31fc:	29 a5       	ldd	r18, Y+41	; 0x29
    31fe:	3a a5       	ldd	r19, Y+42	; 0x2a
    3200:	88 e8       	ldi	r24, 0x88	; 136
    3202:	93 e1       	ldi	r25, 0x13	; 19
    3204:	ac 01       	movw	r20, r24
    3206:	24 9f       	mul	r18, r20
    3208:	c0 01       	movw	r24, r0
    320a:	25 9f       	mul	r18, r21
    320c:	90 0d       	add	r25, r0
    320e:	34 9f       	mul	r19, r20
    3210:	90 0d       	add	r25, r0
    3212:	11 24       	eor	r1, r1
    3214:	89 2f       	mov	r24, r25
    3216:	99 27       	eor	r25, r25
    3218:	86 95       	lsr	r24
    321a:	86 95       	lsr	r24
    321c:	98 a7       	std	Y+40, r25	; 0x28
    321e:	8f a3       	std	Y+39, r24	; 0x27
			sum+=local_u16AnalogSignal_2;
    3220:	29 85       	ldd	r18, Y+9	; 0x09
    3222:	3a 85       	ldd	r19, Y+10	; 0x0a
    3224:	8f a1       	ldd	r24, Y+39	; 0x27
    3226:	98 a5       	ldd	r25, Y+40	; 0x28
    3228:	82 0f       	add	r24, r18
    322a:	93 1f       	adc	r25, r19
    322c:	9a 87       	std	Y+10, r25	; 0x0a
    322e:	89 87       	std	Y+9, r24	; 0x09
			if(var==29)
    3230:	8b 85       	ldd	r24, Y+11	; 0x0b
    3232:	9c 85       	ldd	r25, Y+12	; 0x0c
    3234:	8d 31       	cpi	r24, 0x1D	; 29
    3236:	91 05       	cpc	r25, r1
    3238:	d1 f4       	brne	.+52     	; 0x326e <main+0x18e>
			{
				sum+=local_u16AnalogSignal_2;
    323a:	29 85       	ldd	r18, Y+9	; 0x09
    323c:	3a 85       	ldd	r19, Y+10	; 0x0a
    323e:	8f a1       	ldd	r24, Y+39	; 0x27
    3240:	98 a5       	ldd	r25, Y+40	; 0x28
    3242:	82 0f       	add	r24, r18
    3244:	93 1f       	adc	r25, r19
    3246:	9a 87       	std	Y+10, r25	; 0x0a
    3248:	89 87       	std	Y+9, r24	; 0x09
				sum=sum/30;
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	2e e1       	ldi	r18, 0x1E	; 30
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	b9 01       	movw	r22, r18
    3254:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    3258:	cb 01       	movw	r24, r22
    325a:	9a 87       	std	Y+10, r25	; 0x0a
    325c:	89 87       	std	Y+9, r24	; 0x09
				local_u16AnalogSignal_2=sum;
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	98 a7       	std	Y+40, r25	; 0x28
    3264:	8f a3       	std	Y+39, r24	; 0x27
				A_u16_array_AnalogSignal[2]=sum;
    3266:	89 85       	ldd	r24, Y+9	; 0x09
    3268:	9a 85       	ldd	r25, Y+10	; 0x0a
    326a:	98 af       	std	Y+56, r25	; 0x38
    326c:	8f ab       	std	Y+55, r24	; 0x37

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    326e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3270:	9c 85       	ldd	r25, Y+12	; 0x0c
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	9c 87       	std	Y+12, r25	; 0x0c
    3276:	8b 87       	std	Y+11, r24	; 0x0b
    3278:	8b 85       	ldd	r24, Y+11	; 0x0b
    327a:	9c 85       	ldd	r25, Y+12	; 0x0c
    327c:	8e 31       	cpi	r24, 0x1E	; 30
    327e:	91 05       	cpc	r25, r1
    3280:	0c f4       	brge	.+2      	; 0x3284 <main+0x1a4>
    3282:	b5 cf       	rjmp	.-150    	; 0x31ee <main+0x10e>

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    3284:	18 86       	std	Y+8, r1	; 0x08
    3286:	1f 82       	std	Y+7, r1	; 0x07
    3288:	45 c0       	rjmp	.+138    	; 0x3314 <main+0x234>
		{
			u16 sum=0;
    328a:	1e 82       	std	Y+6, r1	; 0x06
    328c:	1d 82       	std	Y+5, r1	; 0x05
			local_u16DigitalValue_4 =MADC_u16GetDigitalValue(ADC_4);
    328e:	84 e0       	ldi	r24, 0x04	; 4
    3290:	0e 94 aa 06 	call	0xd54	; 0xd54 <MADC_u16GetDigitalValue>
    3294:	9a a3       	std	Y+34, r25	; 0x22
    3296:	89 a3       	std	Y+33, r24	; 0x21
			local_u16AnalogSignal_4 =(local_u16DigitalValue_4 * 5000)/1024;
    3298:	29 a1       	ldd	r18, Y+33	; 0x21
    329a:	3a a1       	ldd	r19, Y+34	; 0x22
    329c:	88 e8       	ldi	r24, 0x88	; 136
    329e:	93 e1       	ldi	r25, 0x13	; 19
    32a0:	dc 01       	movw	r26, r24
    32a2:	2a 9f       	mul	r18, r26
    32a4:	c0 01       	movw	r24, r0
    32a6:	2b 9f       	mul	r18, r27
    32a8:	90 0d       	add	r25, r0
    32aa:	3a 9f       	mul	r19, r26
    32ac:	90 0d       	add	r25, r0
    32ae:	11 24       	eor	r1, r1
    32b0:	89 2f       	mov	r24, r25
    32b2:	99 27       	eor	r25, r25
    32b4:	86 95       	lsr	r24
    32b6:	86 95       	lsr	r24
    32b8:	98 a3       	std	Y+32, r25	; 0x20
    32ba:	8f 8f       	std	Y+31, r24	; 0x1f
			sum+=local_u16AnalogSignal_4;
    32bc:	2d 81       	ldd	r18, Y+5	; 0x05
    32be:	3e 81       	ldd	r19, Y+6	; 0x06
    32c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32c2:	98 a1       	ldd	r25, Y+32	; 0x20
    32c4:	82 0f       	add	r24, r18
    32c6:	93 1f       	adc	r25, r19
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
			if(var==29)
    32cc:	8f 81       	ldd	r24, Y+7	; 0x07
    32ce:	98 85       	ldd	r25, Y+8	; 0x08
    32d0:	8d 31       	cpi	r24, 0x1D	; 29
    32d2:	91 05       	cpc	r25, r1
    32d4:	d1 f4       	brne	.+52     	; 0x330a <main+0x22a>
			{
				sum+=local_u16AnalogSignal_4;
    32d6:	2d 81       	ldd	r18, Y+5	; 0x05
    32d8:	3e 81       	ldd	r19, Y+6	; 0x06
    32da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32dc:	98 a1       	ldd	r25, Y+32	; 0x20
    32de:	82 0f       	add	r24, r18
    32e0:	93 1f       	adc	r25, r19
    32e2:	9e 83       	std	Y+6, r25	; 0x06
    32e4:	8d 83       	std	Y+5, r24	; 0x05
				sum=sum/30;
    32e6:	8d 81       	ldd	r24, Y+5	; 0x05
    32e8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ea:	2e e1       	ldi	r18, 0x1E	; 30
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	b9 01       	movw	r22, r18
    32f0:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    32f4:	cb 01       	movw	r24, r22
    32f6:	9e 83       	std	Y+6, r25	; 0x06
    32f8:	8d 83       	std	Y+5, r24	; 0x05
				local_u16AnalogSignal_4=sum;
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	98 a3       	std	Y+32, r25	; 0x20
    3300:	8f 8f       	std	Y+31, r24	; 0x1f
				A_u16_array_AnalogSignal[4]=sum;
    3302:	8d 81       	ldd	r24, Y+5	; 0x05
    3304:	9e 81       	ldd	r25, Y+6	; 0x06
    3306:	9c af       	std	Y+60, r25	; 0x3c
    3308:	8b af       	std	Y+59, r24	; 0x3b

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    330a:	8f 81       	ldd	r24, Y+7	; 0x07
    330c:	98 85       	ldd	r25, Y+8	; 0x08
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	98 87       	std	Y+8, r25	; 0x08
    3312:	8f 83       	std	Y+7, r24	; 0x07
    3314:	8f 81       	ldd	r24, Y+7	; 0x07
    3316:	98 85       	ldd	r25, Y+8	; 0x08
    3318:	8e 31       	cpi	r24, 0x1E	; 30
    331a:	91 05       	cpc	r25, r1
    331c:	0c f4       	brge	.+2      	; 0x3320 <main+0x240>
    331e:	b5 cf       	rjmp	.-150    	; 0x328a <main+0x1aa>

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    3320:	1c 82       	std	Y+4, r1	; 0x04
    3322:	1b 82       	std	Y+3, r1	; 0x03
    3324:	47 c0       	rjmp	.+142    	; 0x33b4 <main+0x2d4>
		{
			u16 sum=0;
    3326:	1a 82       	std	Y+2, r1	; 0x02
    3328:	19 82       	std	Y+1, r1	; 0x01
			local_u16DigitalValue_6 =MADC_u16GetDigitalValue(ADC_6);
    332a:	86 e0       	ldi	r24, 0x06	; 6
    332c:	0e 94 aa 06 	call	0xd54	; 0xd54 <MADC_u16GetDigitalValue>
    3330:	9a 8f       	std	Y+26, r25	; 0x1a
    3332:	89 8f       	std	Y+25, r24	; 0x19
			local_u16AnalogSignal_6 =(local_u16DigitalValue_6 * 5000)/1024;
    3334:	29 8d       	ldd	r18, Y+25	; 0x19
    3336:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3338:	88 e8       	ldi	r24, 0x88	; 136
    333a:	93 e1       	ldi	r25, 0x13	; 19
    333c:	ac 01       	movw	r20, r24
    333e:	24 9f       	mul	r18, r20
    3340:	c0 01       	movw	r24, r0
    3342:	25 9f       	mul	r18, r21
    3344:	90 0d       	add	r25, r0
    3346:	34 9f       	mul	r19, r20
    3348:	90 0d       	add	r25, r0
    334a:	11 24       	eor	r1, r1
    334c:	89 2f       	mov	r24, r25
    334e:	99 27       	eor	r25, r25
    3350:	86 95       	lsr	r24
    3352:	86 95       	lsr	r24
    3354:	98 8f       	std	Y+24, r25	; 0x18
    3356:	8f 8b       	std	Y+23, r24	; 0x17
			sum+=local_u16AnalogSignal_6;
    3358:	29 81       	ldd	r18, Y+1	; 0x01
    335a:	3a 81       	ldd	r19, Y+2	; 0x02
    335c:	8f 89       	ldd	r24, Y+23	; 0x17
    335e:	98 8d       	ldd	r25, Y+24	; 0x18
    3360:	82 0f       	add	r24, r18
    3362:	93 1f       	adc	r25, r19
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
			if(var==29)
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	8d 31       	cpi	r24, 0x1D	; 29
    336e:	91 05       	cpc	r25, r1
    3370:	e1 f4       	brne	.+56     	; 0x33aa <main+0x2ca>
			{
				sum+=local_u16AnalogSignal_6;
    3372:	29 81       	ldd	r18, Y+1	; 0x01
    3374:	3a 81       	ldd	r19, Y+2	; 0x02
    3376:	8f 89       	ldd	r24, Y+23	; 0x17
    3378:	98 8d       	ldd	r25, Y+24	; 0x18
    337a:	82 0f       	add	r24, r18
    337c:	93 1f       	adc	r25, r19
    337e:	9a 83       	std	Y+2, r25	; 0x02
    3380:	89 83       	std	Y+1, r24	; 0x01
				sum=sum/30;
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	9a 81       	ldd	r25, Y+2	; 0x02
    3386:	2e e1       	ldi	r18, 0x1E	; 30
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	b9 01       	movw	r22, r18
    338c:	0e 94 92 1b 	call	0x3724	; 0x3724 <__udivmodhi4>
    3390:	cb 01       	movw	r24, r22
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
				local_u16AnalogSignal_6=sum;
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	98 8f       	std	Y+24, r25	; 0x18
    339c:	8f 8b       	std	Y+23, r24	; 0x17
				A_u16_array_AnalogSignal[6]=sum;
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	fe 01       	movw	r30, r28
    33a4:	ff 96       	adiw	r30, 0x3f	; 63
    33a6:	91 83       	std	Z+1, r25	; 0x01
    33a8:	80 83       	st	Z, r24

			}
			//_delay_ms(100);
		}
		*/
		for (int var = 0; var < 30; ++var)
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	9c 81       	ldd	r25, Y+4	; 0x04
    33ae:	01 96       	adiw	r24, 0x01	; 1
    33b0:	9c 83       	std	Y+4, r25	; 0x04
    33b2:	8b 83       	std	Y+3, r24	; 0x03
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	8e 31       	cpi	r24, 0x1E	; 30
    33ba:	91 05       	cpc	r25, r1
    33bc:	0c f4       	brge	.+2      	; 0x33c0 <main+0x2e0>
    33be:	b3 cf       	rjmp	.-154    	; 0x3326 <main+0x246>
			}
			//_delay_ms(100);
		}
		 */

		if(local_u16AnalogSignal_0>local_u16AnalogSignal_1 && local_u16AnalogSignal_0>local_u16AnalogSignal_2 && local_u16AnalogSignal_0>local_u16AnalogSignal_3&& local_u16AnalogSignal_0>local_u16AnalogSignal_4&& local_u16AnalogSignal_0>local_u16AnalogSignal_5&& local_u16AnalogSignal_0>local_u16AnalogSignal_6&& local_u16AnalogSignal_0>local_u16AnalogSignal_7 )
    33c0:	2f a5       	ldd	r18, Y+47	; 0x2f
    33c2:	38 a9       	ldd	r19, Y+48	; 0x30
    33c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c8:	82 17       	cp	r24, r18
    33ca:	93 07       	cpc	r25, r19
    33cc:	88 f5       	brcc	.+98     	; 0x3430 <main+0x350>
    33ce:	2f a5       	ldd	r18, Y+47	; 0x2f
    33d0:	38 a9       	ldd	r19, Y+48	; 0x30
    33d2:	8f a1       	ldd	r24, Y+39	; 0x27
    33d4:	98 a5       	ldd	r25, Y+40	; 0x28
    33d6:	82 17       	cp	r24, r18
    33d8:	93 07       	cpc	r25, r19
    33da:	50 f5       	brcc	.+84     	; 0x3430 <main+0x350>
    33dc:	2f a5       	ldd	r18, Y+47	; 0x2f
    33de:	38 a9       	ldd	r19, Y+48	; 0x30
    33e0:	8b a1       	ldd	r24, Y+35	; 0x23
    33e2:	9c a1       	ldd	r25, Y+36	; 0x24
    33e4:	82 17       	cp	r24, r18
    33e6:	93 07       	cpc	r25, r19
    33e8:	18 f5       	brcc	.+70     	; 0x3430 <main+0x350>
    33ea:	2f a5       	ldd	r18, Y+47	; 0x2f
    33ec:	38 a9       	ldd	r19, Y+48	; 0x30
    33ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33f0:	98 a1       	ldd	r25, Y+32	; 0x20
    33f2:	82 17       	cp	r24, r18
    33f4:	93 07       	cpc	r25, r19
    33f6:	e0 f4       	brcc	.+56     	; 0x3430 <main+0x350>
    33f8:	2f a5       	ldd	r18, Y+47	; 0x2f
    33fa:	38 a9       	ldd	r19, Y+48	; 0x30
    33fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3400:	82 17       	cp	r24, r18
    3402:	93 07       	cpc	r25, r19
    3404:	a8 f4       	brcc	.+42     	; 0x3430 <main+0x350>
    3406:	2f a5       	ldd	r18, Y+47	; 0x2f
    3408:	38 a9       	ldd	r19, Y+48	; 0x30
    340a:	8f 89       	ldd	r24, Y+23	; 0x17
    340c:	98 8d       	ldd	r25, Y+24	; 0x18
    340e:	82 17       	cp	r24, r18
    3410:	93 07       	cpc	r25, r19
    3412:	70 f4       	brcc	.+28     	; 0x3430 <main+0x350>
    3414:	2f a5       	ldd	r18, Y+47	; 0x2f
    3416:	38 a9       	ldd	r19, Y+48	; 0x30
    3418:	8b 89       	ldd	r24, Y+19	; 0x13
    341a:	9c 89       	ldd	r25, Y+20	; 0x14
    341c:	82 17       	cp	r24, r18
    341e:	93 07       	cpc	r25, r19
    3420:	38 f4       	brcc	.+14     	; 0x3430 <main+0x350>
		{HSERVO_voidSetAngle(22); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 22 degree \r\n");}
    3422:	86 e1       	ldi	r24, 0x16	; 22
    3424:	0e 94 c8 1a 	call	0x3590	; 0x3590 <HSERVO_voidSetAngle>
    3428:	82 eb       	ldi	r24, 0xB2	; 178
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
		//if(local_u16AnalogSignal_1>local_u16AnalogSignal_0 && local_u16AnalogSignal_1>local_u16AnalogSignal_2 && local_u16AnalogSignal_1>local_u16AnalogSignal_3&& local_u16AnalogSignal_1>local_u16AnalogSignal_4&& local_u16AnalogSignal_1>local_u16AnalogSignal_5&& local_u16AnalogSignal_1>local_u16AnalogSignal_6&& local_u16AnalogSignal_1>local_u16AnalogSignal_7 )
		//{HSERVO_voidSetAngle(45); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 45 degree \r\n");}
		if(local_u16AnalogSignal_2>local_u16AnalogSignal_0 && local_u16AnalogSignal_2>local_u16AnalogSignal_1 && local_u16AnalogSignal_2>local_u16AnalogSignal_3&& local_u16AnalogSignal_2>local_u16AnalogSignal_4&& local_u16AnalogSignal_2>local_u16AnalogSignal_5&& local_u16AnalogSignal_2>local_u16AnalogSignal_6&& local_u16AnalogSignal_2>local_u16AnalogSignal_7 )
    3430:	2f a1       	ldd	r18, Y+39	; 0x27
    3432:	38 a5       	ldd	r19, Y+40	; 0x28
    3434:	8f a5       	ldd	r24, Y+47	; 0x2f
    3436:	98 a9       	ldd	r25, Y+48	; 0x30
    3438:	82 17       	cp	r24, r18
    343a:	93 07       	cpc	r25, r19
    343c:	88 f5       	brcc	.+98     	; 0x34a0 <main+0x3c0>
    343e:	2f a1       	ldd	r18, Y+39	; 0x27
    3440:	38 a5       	ldd	r19, Y+40	; 0x28
    3442:	8b a5       	ldd	r24, Y+43	; 0x2b
    3444:	9c a5       	ldd	r25, Y+44	; 0x2c
    3446:	82 17       	cp	r24, r18
    3448:	93 07       	cpc	r25, r19
    344a:	50 f5       	brcc	.+84     	; 0x34a0 <main+0x3c0>
    344c:	2f a1       	ldd	r18, Y+39	; 0x27
    344e:	38 a5       	ldd	r19, Y+40	; 0x28
    3450:	8b a1       	ldd	r24, Y+35	; 0x23
    3452:	9c a1       	ldd	r25, Y+36	; 0x24
    3454:	82 17       	cp	r24, r18
    3456:	93 07       	cpc	r25, r19
    3458:	18 f5       	brcc	.+70     	; 0x34a0 <main+0x3c0>
    345a:	2f a1       	ldd	r18, Y+39	; 0x27
    345c:	38 a5       	ldd	r19, Y+40	; 0x28
    345e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3460:	98 a1       	ldd	r25, Y+32	; 0x20
    3462:	82 17       	cp	r24, r18
    3464:	93 07       	cpc	r25, r19
    3466:	e0 f4       	brcc	.+56     	; 0x34a0 <main+0x3c0>
    3468:	2f a1       	ldd	r18, Y+39	; 0x27
    346a:	38 a5       	ldd	r19, Y+40	; 0x28
    346c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    346e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3470:	82 17       	cp	r24, r18
    3472:	93 07       	cpc	r25, r19
    3474:	a8 f4       	brcc	.+42     	; 0x34a0 <main+0x3c0>
    3476:	2f a1       	ldd	r18, Y+39	; 0x27
    3478:	38 a5       	ldd	r19, Y+40	; 0x28
    347a:	8f 89       	ldd	r24, Y+23	; 0x17
    347c:	98 8d       	ldd	r25, Y+24	; 0x18
    347e:	82 17       	cp	r24, r18
    3480:	93 07       	cpc	r25, r19
    3482:	70 f4       	brcc	.+28     	; 0x34a0 <main+0x3c0>
    3484:	2f a1       	ldd	r18, Y+39	; 0x27
    3486:	38 a5       	ldd	r19, Y+40	; 0x28
    3488:	8b 89       	ldd	r24, Y+19	; 0x13
    348a:	9c 89       	ldd	r25, Y+20	; 0x14
    348c:	82 17       	cp	r24, r18
    348e:	93 07       	cpc	r25, r19
    3490:	38 f4       	brcc	.+14     	; 0x34a0 <main+0x3c0>
		{HSERVO_voidSetAngle(68); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 68 degree \r\n");}
    3492:	84 e4       	ldi	r24, 0x44	; 68
    3494:	0e 94 c8 1a 	call	0x3590	; 0x3590 <HSERVO_voidSetAngle>
    3498:	8b ed       	ldi	r24, 0xDB	; 219
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
		//if(local_u16AnalogSignal_3>local_u16AnalogSignal_0 && local_u16AnalogSignal_3>local_u16AnalogSignal_1 && local_u16AnalogSignal_3>local_u16AnalogSignal_2&& local_u16AnalogSignal_3>local_u16AnalogSignal_4&& local_u16AnalogSignal_3>local_u16AnalogSignal_5&& local_u16AnalogSignal_3>local_u16AnalogSignal_6&& local_u16AnalogSignal_3>local_u16AnalogSignal_7 )
		//{HSERVO_voidSetAngle(90); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 90 degree \r\n");}
		if(local_u16AnalogSignal_4>local_u16AnalogSignal_0 && local_u16AnalogSignal_4>local_u16AnalogSignal_1 && local_u16AnalogSignal_4>local_u16AnalogSignal_2&& local_u16AnalogSignal_4>local_u16AnalogSignal_3&& local_u16AnalogSignal_4>local_u16AnalogSignal_5&& local_u16AnalogSignal_4>local_u16AnalogSignal_6&& local_u16AnalogSignal_4>local_u16AnalogSignal_7 )
    34a0:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34a2:	38 a1       	ldd	r19, Y+32	; 0x20
    34a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a6:	98 a9       	ldd	r25, Y+48	; 0x30
    34a8:	82 17       	cp	r24, r18
    34aa:	93 07       	cpc	r25, r19
    34ac:	88 f5       	brcc	.+98     	; 0x3510 <main+0x430>
    34ae:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34b0:	38 a1       	ldd	r19, Y+32	; 0x20
    34b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34b6:	82 17       	cp	r24, r18
    34b8:	93 07       	cpc	r25, r19
    34ba:	50 f5       	brcc	.+84     	; 0x3510 <main+0x430>
    34bc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34be:	38 a1       	ldd	r19, Y+32	; 0x20
    34c0:	8f a1       	ldd	r24, Y+39	; 0x27
    34c2:	98 a5       	ldd	r25, Y+40	; 0x28
    34c4:	82 17       	cp	r24, r18
    34c6:	93 07       	cpc	r25, r19
    34c8:	18 f5       	brcc	.+70     	; 0x3510 <main+0x430>
    34ca:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34cc:	38 a1       	ldd	r19, Y+32	; 0x20
    34ce:	8b a1       	ldd	r24, Y+35	; 0x23
    34d0:	9c a1       	ldd	r25, Y+36	; 0x24
    34d2:	82 17       	cp	r24, r18
    34d4:	93 07       	cpc	r25, r19
    34d6:	e0 f4       	brcc	.+56     	; 0x3510 <main+0x430>
    34d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34da:	38 a1       	ldd	r19, Y+32	; 0x20
    34dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e0:	82 17       	cp	r24, r18
    34e2:	93 07       	cpc	r25, r19
    34e4:	a8 f4       	brcc	.+42     	; 0x3510 <main+0x430>
    34e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34e8:	38 a1       	ldd	r19, Y+32	; 0x20
    34ea:	8f 89       	ldd	r24, Y+23	; 0x17
    34ec:	98 8d       	ldd	r25, Y+24	; 0x18
    34ee:	82 17       	cp	r24, r18
    34f0:	93 07       	cpc	r25, r19
    34f2:	70 f4       	brcc	.+28     	; 0x3510 <main+0x430>
    34f4:	2f 8d       	ldd	r18, Y+31	; 0x1f
    34f6:	38 a1       	ldd	r19, Y+32	; 0x20
    34f8:	8b 89       	ldd	r24, Y+19	; 0x13
    34fa:	9c 89       	ldd	r25, Y+20	; 0x14
    34fc:	82 17       	cp	r24, r18
    34fe:	93 07       	cpc	r25, r19
    3500:	38 f4       	brcc	.+14     	; 0x3510 <main+0x430>
		{HSERVO_voidSetAngle(112); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 112 degree \r\n");}
    3502:	80 e7       	ldi	r24, 0x70	; 112
    3504:	0e 94 c8 1a 	call	0x3590	; 0x3590 <HSERVO_voidSetAngle>
    3508:	84 e0       	ldi	r24, 0x04	; 4
    350a:	91 e0       	ldi	r25, 0x01	; 1
    350c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
		//if(local_u16AnalogSignal_5>local_u16AnalogSignal_0 && local_u16AnalogSignal_5>local_u16AnalogSignal_1 && local_u16AnalogSignal_5>local_u16AnalogSignal_2&& local_u16AnalogSignal_5>local_u16AnalogSignal_3&& local_u16AnalogSignal_5>local_u16AnalogSignal_4&& local_u16AnalogSignal_5>local_u16AnalogSignal_6&& local_u16AnalogSignal_5>local_u16AnalogSignal_7 )
		//{HSERVO_voidSetAngle(135); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 135 degree \r\n");}
		if(local_u16AnalogSignal_6>local_u16AnalogSignal_0 && local_u16AnalogSignal_6>local_u16AnalogSignal_1 && local_u16AnalogSignal_6>local_u16AnalogSignal_2&& local_u16AnalogSignal_6>local_u16AnalogSignal_3&& local_u16AnalogSignal_6>local_u16AnalogSignal_4&& local_u16AnalogSignal_6>local_u16AnalogSignal_5&& local_u16AnalogSignal_6>local_u16AnalogSignal_7 )
    3510:	2f 89       	ldd	r18, Y+23	; 0x17
    3512:	38 8d       	ldd	r19, Y+24	; 0x18
    3514:	8f a5       	ldd	r24, Y+47	; 0x2f
    3516:	98 a9       	ldd	r25, Y+48	; 0x30
    3518:	82 17       	cp	r24, r18
    351a:	93 07       	cpc	r25, r19
    351c:	08 f0       	brcs	.+2      	; 0x3520 <main+0x440>
    351e:	16 ce       	rjmp	.-980    	; 0x314c <main+0x6c>
    3520:	2f 89       	ldd	r18, Y+23	; 0x17
    3522:	38 8d       	ldd	r19, Y+24	; 0x18
    3524:	8b a5       	ldd	r24, Y+43	; 0x2b
    3526:	9c a5       	ldd	r25, Y+44	; 0x2c
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	08 f0       	brcs	.+2      	; 0x3530 <main+0x450>
    352e:	0e ce       	rjmp	.-996    	; 0x314c <main+0x6c>
    3530:	2f 89       	ldd	r18, Y+23	; 0x17
    3532:	38 8d       	ldd	r19, Y+24	; 0x18
    3534:	8f a1       	ldd	r24, Y+39	; 0x27
    3536:	98 a5       	ldd	r25, Y+40	; 0x28
    3538:	82 17       	cp	r24, r18
    353a:	93 07       	cpc	r25, r19
    353c:	08 f0       	brcs	.+2      	; 0x3540 <main+0x460>
    353e:	06 ce       	rjmp	.-1012   	; 0x314c <main+0x6c>
    3540:	2f 89       	ldd	r18, Y+23	; 0x17
    3542:	38 8d       	ldd	r19, Y+24	; 0x18
    3544:	8b a1       	ldd	r24, Y+35	; 0x23
    3546:	9c a1       	ldd	r25, Y+36	; 0x24
    3548:	82 17       	cp	r24, r18
    354a:	93 07       	cpc	r25, r19
    354c:	08 f0       	brcs	.+2      	; 0x3550 <main+0x470>
    354e:	fe cd       	rjmp	.-1028   	; 0x314c <main+0x6c>
    3550:	2f 89       	ldd	r18, Y+23	; 0x17
    3552:	38 8d       	ldd	r19, Y+24	; 0x18
    3554:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3556:	98 a1       	ldd	r25, Y+32	; 0x20
    3558:	82 17       	cp	r24, r18
    355a:	93 07       	cpc	r25, r19
    355c:	08 f0       	brcs	.+2      	; 0x3560 <main+0x480>
    355e:	f6 cd       	rjmp	.-1044   	; 0x314c <main+0x6c>
    3560:	2f 89       	ldd	r18, Y+23	; 0x17
    3562:	38 8d       	ldd	r19, Y+24	; 0x18
    3564:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3566:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3568:	82 17       	cp	r24, r18
    356a:	93 07       	cpc	r25, r19
    356c:	08 f0       	brcs	.+2      	; 0x3570 <main+0x490>
    356e:	ee cd       	rjmp	.-1060   	; 0x314c <main+0x6c>
    3570:	2f 89       	ldd	r18, Y+23	; 0x17
    3572:	38 8d       	ldd	r19, Y+24	; 0x18
    3574:	8b 89       	ldd	r24, Y+19	; 0x13
    3576:	9c 89       	ldd	r25, Y+20	; 0x14
    3578:	82 17       	cp	r24, r18
    357a:	93 07       	cpc	r25, r19
    357c:	08 f0       	brcs	.+2      	; 0x3580 <main+0x4a0>
    357e:	e6 cd       	rjmp	.-1076   	; 0x314c <main+0x6c>
		{HSERVO_voidSetAngle(157); MUART_voidSendStringSyncNonBlocking("the angle of solar panel is 157 degree \r\n");}
    3580:	8d e9       	ldi	r24, 0x9D	; 157
    3582:	0e 94 c8 1a 	call	0x3590	; 0x3590 <HSERVO_voidSetAngle>
    3586:	8e e2       	ldi	r24, 0x2E	; 46
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <MUART_voidSendStringSyncNonBlocking>
    358e:	de cd       	rjmp	.-1092   	; 0x314c <main+0x6c>

00003590 <HSERVO_voidSetAngle>:
	}
	return 0;
}

void HSERVO_voidSetAngle (u8 A_u8Angle)
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	61 97       	sbiw	r28, 0x11	; 17
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	89 8b       	std	Y+17, r24	; 0x11
	if (A_u8Angle <= 180)
    35a6:	89 89       	ldd	r24, Y+17	; 0x11
    35a8:	85 3b       	cpi	r24, 0xB5	; 181
    35aa:	08 f0       	brcs	.+2      	; 0x35ae <HSERVO_voidSetAngle+0x1e>
    35ac:	93 c0       	rjmp	.+294    	; 0x36d4 <HSERVO_voidSetAngle+0x144>
	{
		u16 local_u16OCRValue = (((A_u8Angle*1000UL)/180) + 999);
    35ae:	89 89       	ldd	r24, Y+17	; 0x11
    35b0:	88 2f       	mov	r24, r24
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	a0 e0       	ldi	r26, 0x00	; 0
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	28 ee       	ldi	r18, 0xE8	; 232
    35ba:	33 e0       	ldi	r19, 0x03	; 3
    35bc:	40 e0       	ldi	r20, 0x00	; 0
    35be:	50 e0       	ldi	r21, 0x00	; 0
    35c0:	bc 01       	movw	r22, r24
    35c2:	cd 01       	movw	r24, r26
    35c4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__mulsi3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	24 eb       	ldi	r18, 0xB4	; 180
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e0       	ldi	r20, 0x00	; 0
    35d2:	50 e0       	ldi	r21, 0x00	; 0
    35d4:	bc 01       	movw	r22, r24
    35d6:	cd 01       	movw	r24, r26
    35d8:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__udivmodsi4>
    35dc:	da 01       	movw	r26, r20
    35de:	c9 01       	movw	r24, r18
    35e0:	89 51       	subi	r24, 0x19	; 25
    35e2:	9c 4f       	sbci	r25, 0xFC	; 252
    35e4:	98 8b       	std	Y+16, r25	; 0x10
    35e6:	8f 87       	std	Y+15, r24	; 0x0f
		MTIMER1_voidSetOCR1AValue(local_u16OCRValue);//		 MTIMER1_voidSetOCR1AValue(1500);
    35e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ea:	98 89       	ldd	r25, Y+16	; 0x10
    35ec:	0e 94 d7 15 	call	0x2bae	; 0x2bae <MTIMER1_voidSetOCR1AValue>
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	a8 e4       	ldi	r26, 0x48	; 72
    35f6:	b3 e4       	ldi	r27, 0x43	; 67
    35f8:	8b 87       	std	Y+11, r24	; 0x0b
    35fa:	9c 87       	std	Y+12, r25	; 0x0c
    35fc:	ad 87       	std	Y+13, r26	; 0x0d
    35fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3600:	6b 85       	ldd	r22, Y+11	; 0x0b
    3602:	7c 85       	ldd	r23, Y+12	; 0x0c
    3604:	8d 85       	ldd	r24, Y+13	; 0x0d
    3606:	9e 85       	ldd	r25, Y+14	; 0x0e
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	4a ef       	ldi	r20, 0xFA	; 250
    360e:	54 e4       	ldi	r21, 0x44	; 68
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	8f 83       	std	Y+7, r24	; 0x07
    361a:	98 87       	std	Y+8, r25	; 0x08
    361c:	a9 87       	std	Y+9, r26	; 0x09
    361e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3620:	6f 81       	ldd	r22, Y+7	; 0x07
    3622:	78 85       	ldd	r23, Y+8	; 0x08
    3624:	89 85       	ldd	r24, Y+9	; 0x09
    3626:	9a 85       	ldd	r25, Y+10	; 0x0a
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <HSERVO_voidSetAngle+0xb2>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	3f c0       	rjmp	.+126    	; 0x36c0 <HSERVO_voidSetAngle+0x130>
	else if (__tmp > 65535)
    3642:	6f 81       	ldd	r22, Y+7	; 0x07
    3644:	78 85       	ldd	r23, Y+8	; 0x08
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	3f ef       	ldi	r19, 0xFF	; 255
    364e:	4f e7       	ldi	r20, 0x7F	; 127
    3650:	57 e4       	ldi	r21, 0x47	; 71
    3652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3656:	18 16       	cp	r1, r24
    3658:	4c f5       	brge	.+82     	; 0x36ac <HSERVO_voidSetAngle+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365a:	6b 85       	ldd	r22, Y+11	; 0x0b
    365c:	7c 85       	ldd	r23, Y+12	; 0x0c
    365e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3660:	9e 85       	ldd	r25, Y+14	; 0x0e
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	bc 01       	movw	r22, r24
    3674:	cd 01       	movw	r24, r26
    3676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	9e 83       	std	Y+6, r25	; 0x06
    3680:	8d 83       	std	Y+5, r24	; 0x05
    3682:	0f c0       	rjmp	.+30     	; 0x36a2 <HSERVO_voidSetAngle+0x112>
    3684:	88 ec       	ldi	r24, 0xC8	; 200
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	9c 83       	std	Y+4, r25	; 0x04
    368a:	8b 83       	std	Y+3, r24	; 0x03
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <HSERVO_voidSetAngle+0x100>
    3694:	9c 83       	std	Y+4, r25	; 0x04
    3696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	01 97       	sbiw	r24, 0x01	; 1
    369e:	9e 83       	std	Y+6, r25	; 0x06
    36a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a2:	8d 81       	ldd	r24, Y+5	; 0x05
    36a4:	9e 81       	ldd	r25, Y+6	; 0x06
    36a6:	00 97       	sbiw	r24, 0x00	; 0
    36a8:	69 f7       	brne	.-38     	; 0x3684 <HSERVO_voidSetAngle+0xf4>
    36aa:	14 c0       	rjmp	.+40     	; 0x36d4 <HSERVO_voidSetAngle+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ac:	6f 81       	ldd	r22, Y+7	; 0x07
    36ae:	78 85       	ldd	r23, Y+8	; 0x08
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9e 83       	std	Y+6, r25	; 0x06
    36be:	8d 83       	std	Y+5, r24	; 0x05
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	01 97       	sbiw	r24, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <HSERVO_voidSetAngle+0x13c>
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms (200);
	}
}
    36d4:	61 96       	adiw	r28, 0x11	; 17
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <__mulsi3>:
    36e6:	62 9f       	mul	r22, r18
    36e8:	d0 01       	movw	r26, r0
    36ea:	73 9f       	mul	r23, r19
    36ec:	f0 01       	movw	r30, r0
    36ee:	82 9f       	mul	r24, r18
    36f0:	e0 0d       	add	r30, r0
    36f2:	f1 1d       	adc	r31, r1
    36f4:	64 9f       	mul	r22, r20
    36f6:	e0 0d       	add	r30, r0
    36f8:	f1 1d       	adc	r31, r1
    36fa:	92 9f       	mul	r25, r18
    36fc:	f0 0d       	add	r31, r0
    36fe:	83 9f       	mul	r24, r19
    3700:	f0 0d       	add	r31, r0
    3702:	74 9f       	mul	r23, r20
    3704:	f0 0d       	add	r31, r0
    3706:	65 9f       	mul	r22, r21
    3708:	f0 0d       	add	r31, r0
    370a:	99 27       	eor	r25, r25
    370c:	72 9f       	mul	r23, r18
    370e:	b0 0d       	add	r27, r0
    3710:	e1 1d       	adc	r30, r1
    3712:	f9 1f       	adc	r31, r25
    3714:	63 9f       	mul	r22, r19
    3716:	b0 0d       	add	r27, r0
    3718:	e1 1d       	adc	r30, r1
    371a:	f9 1f       	adc	r31, r25
    371c:	bd 01       	movw	r22, r26
    371e:	cf 01       	movw	r24, r30
    3720:	11 24       	eor	r1, r1
    3722:	08 95       	ret

00003724 <__udivmodhi4>:
    3724:	aa 1b       	sub	r26, r26
    3726:	bb 1b       	sub	r27, r27
    3728:	51 e1       	ldi	r21, 0x11	; 17
    372a:	07 c0       	rjmp	.+14     	; 0x373a <__udivmodhi4_ep>

0000372c <__udivmodhi4_loop>:
    372c:	aa 1f       	adc	r26, r26
    372e:	bb 1f       	adc	r27, r27
    3730:	a6 17       	cp	r26, r22
    3732:	b7 07       	cpc	r27, r23
    3734:	10 f0       	brcs	.+4      	; 0x373a <__udivmodhi4_ep>
    3736:	a6 1b       	sub	r26, r22
    3738:	b7 0b       	sbc	r27, r23

0000373a <__udivmodhi4_ep>:
    373a:	88 1f       	adc	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	5a 95       	dec	r21
    3740:	a9 f7       	brne	.-22     	; 0x372c <__udivmodhi4_loop>
    3742:	80 95       	com	r24
    3744:	90 95       	com	r25
    3746:	bc 01       	movw	r22, r24
    3748:	cd 01       	movw	r24, r26
    374a:	08 95       	ret

0000374c <__divmodhi4>:
    374c:	97 fb       	bst	r25, 7
    374e:	09 2e       	mov	r0, r25
    3750:	07 26       	eor	r0, r23
    3752:	0a d0       	rcall	.+20     	; 0x3768 <__divmodhi4_neg1>
    3754:	77 fd       	sbrc	r23, 7
    3756:	04 d0       	rcall	.+8      	; 0x3760 <__divmodhi4_neg2>
    3758:	e5 df       	rcall	.-54     	; 0x3724 <__udivmodhi4>
    375a:	06 d0       	rcall	.+12     	; 0x3768 <__divmodhi4_neg1>
    375c:	00 20       	and	r0, r0
    375e:	1a f4       	brpl	.+6      	; 0x3766 <__divmodhi4_exit>

00003760 <__divmodhi4_neg2>:
    3760:	70 95       	com	r23
    3762:	61 95       	neg	r22
    3764:	7f 4f       	sbci	r23, 0xFF	; 255

00003766 <__divmodhi4_exit>:
    3766:	08 95       	ret

00003768 <__divmodhi4_neg1>:
    3768:	f6 f7       	brtc	.-4      	; 0x3766 <__divmodhi4_exit>
    376a:	90 95       	com	r25
    376c:	81 95       	neg	r24
    376e:	9f 4f       	sbci	r25, 0xFF	; 255
    3770:	08 95       	ret

00003772 <__udivmodsi4>:
    3772:	a1 e2       	ldi	r26, 0x21	; 33
    3774:	1a 2e       	mov	r1, r26
    3776:	aa 1b       	sub	r26, r26
    3778:	bb 1b       	sub	r27, r27
    377a:	fd 01       	movw	r30, r26
    377c:	0d c0       	rjmp	.+26     	; 0x3798 <__udivmodsi4_ep>

0000377e <__udivmodsi4_loop>:
    377e:	aa 1f       	adc	r26, r26
    3780:	bb 1f       	adc	r27, r27
    3782:	ee 1f       	adc	r30, r30
    3784:	ff 1f       	adc	r31, r31
    3786:	a2 17       	cp	r26, r18
    3788:	b3 07       	cpc	r27, r19
    378a:	e4 07       	cpc	r30, r20
    378c:	f5 07       	cpc	r31, r21
    378e:	20 f0       	brcs	.+8      	; 0x3798 <__udivmodsi4_ep>
    3790:	a2 1b       	sub	r26, r18
    3792:	b3 0b       	sbc	r27, r19
    3794:	e4 0b       	sbc	r30, r20
    3796:	f5 0b       	sbc	r31, r21

00003798 <__udivmodsi4_ep>:
    3798:	66 1f       	adc	r22, r22
    379a:	77 1f       	adc	r23, r23
    379c:	88 1f       	adc	r24, r24
    379e:	99 1f       	adc	r25, r25
    37a0:	1a 94       	dec	r1
    37a2:	69 f7       	brne	.-38     	; 0x377e <__udivmodsi4_loop>
    37a4:	60 95       	com	r22
    37a6:	70 95       	com	r23
    37a8:	80 95       	com	r24
    37aa:	90 95       	com	r25
    37ac:	9b 01       	movw	r18, r22
    37ae:	ac 01       	movw	r20, r24
    37b0:	bd 01       	movw	r22, r26
    37b2:	cf 01       	movw	r24, r30
    37b4:	08 95       	ret

000037b6 <__prologue_saves__>:
    37b6:	2f 92       	push	r2
    37b8:	3f 92       	push	r3
    37ba:	4f 92       	push	r4
    37bc:	5f 92       	push	r5
    37be:	6f 92       	push	r6
    37c0:	7f 92       	push	r7
    37c2:	8f 92       	push	r8
    37c4:	9f 92       	push	r9
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	ca 1b       	sub	r28, r26
    37e0:	db 0b       	sbc	r29, r27
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	09 94       	ijmp

000037ee <__epilogue_restores__>:
    37ee:	2a 88       	ldd	r2, Y+18	; 0x12
    37f0:	39 88       	ldd	r3, Y+17	; 0x11
    37f2:	48 88       	ldd	r4, Y+16	; 0x10
    37f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    37f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    37f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    37fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    37fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    37fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3800:	b9 84       	ldd	r11, Y+9	; 0x09
    3802:	c8 84       	ldd	r12, Y+8	; 0x08
    3804:	df 80       	ldd	r13, Y+7	; 0x07
    3806:	ee 80       	ldd	r14, Y+6	; 0x06
    3808:	fd 80       	ldd	r15, Y+5	; 0x05
    380a:	0c 81       	ldd	r16, Y+4	; 0x04
    380c:	1b 81       	ldd	r17, Y+3	; 0x03
    380e:	aa 81       	ldd	r26, Y+2	; 0x02
    3810:	b9 81       	ldd	r27, Y+1	; 0x01
    3812:	ce 0f       	add	r28, r30
    3814:	d1 1d       	adc	r29, r1
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	ed 01       	movw	r28, r26
    3822:	08 95       	ret

00003824 <_exit>:
    3824:	f8 94       	cli

00003826 <__stop_program>:
    3826:	ff cf       	rjmp	.-2      	; 0x3826 <__stop_program>
